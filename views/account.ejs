<!doctype html>
<html lang="en">
<head>
  <%- include('./partials/head', {
    pageTitle: 'Account • BookLantern',
    pageDescription: 'Manage your BookLantern profile and email preferences.',
    canonicalUrl: (typeof canonicalUrl !== 'undefined' ? canonicalUrl : '')
  }) %>
  <style>
    .container{max-width:880px;margin:28px auto;padding:0 16px}
    .grid{display:grid;grid-template-columns:1fr;gap:16px}
    @media (min-width: 900px){ .grid{grid-template-columns: 1fr 320px} }
    .card{background:var(--surface,#fff);border:1px solid rgba(0,0,0,.06);border-radius:12px;padding:16px;box-shadow:0 10px 30px rgba(0,0,0,.06)}
    .row{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
    .stack{display:flex;flex-direction:column;gap:10px}
    .input, .checkbox-line{width:100%}
    .input{padding:10px 12px;border:1px solid var(--ink-3,#d1d5db);border-radius:8px;background:var(--surface,#fff)}
    .label{font-size:14px;font-weight:600}
    .help{font-size:12px;color:#6b7280}
    .btn{padding:10px 14px;border-radius:8px;border:1px solid rgba(0,0,0,.1);cursor:pointer;background:#f3f4f6}
    .btn-primary{background:#6366f1;color:#fff;border:0}
    .btn-ghost{background:transparent}
    .badge{display:inline-block;padding:2px 8px;border-radius:999px;background:#eef2ff;color:#3730a3;font-size:12px}
    .muted{color:#6b7280}
    .right{display:flex;justify-content:flex-end;gap:8px}
    .hr{height:1px;background:rgba(0,0,0,.06);margin:8px 0}
    .danger{color:#b91c1c}
    .success{color:#065f46}
    .status{padding:10px 12px;border:1px solid rgba(0,0,0,.08);border-radius:8px}
    .visually-hidden{position:absolute!important;height:1px;width:1px;overflow:hidden;clip:rect(1px,1px,1px,1px);white-space:nowrap}
  </style>
</head>
<body>
  <%- include('./partials/navbar') %>

  <main class="container">
    <h1 style="margin:4px 0 16px;">Account</h1>

    <div id="status" class="status" role="status" aria-live="polite" style="display:none;"></div>

    <div class="grid">
      <!-- Left: Profile form -->
      <section class="card">
        <h2 style="margin:0 0 8px;">Profile</h2>
        <p class="muted" style="margin:0 0 14px;">Update your public profile and email preferences.</p>

        <form id="profileForm" class="stack" novalidate>
          <!-- Email (read-only) -->
          <div class="stack">
            <label class="label" for="email">Email</label>
            <input id="email" class="input" type="email" autocomplete="email" readonly>
            <div class="help">Email is managed by your sign-in method.</div>
          </div>

          <!-- Display name -->
          <div class="stack">
            <label class="label" for="display_name">Display name</label>
            <input id="display_name" class="input" type="text" placeholder="Your name as others see it">
          </div>

          <!-- Preferences -->
          <div class="stack">
            <span class="label">Email preferences</span>
            <label class="row checkbox-line" style="justify-content:flex-start;">
              <input id="newsletter" type="checkbox">
              <span>Monthly reading newsletter</span>
            </label>
            <label class="row checkbox-line" style="justify-content:flex-start;">
              <input id="product_updates" type="checkbox">
              <span>Product updates & tips</span>
            </label>
          </div>

          <div class="right">
            <button id="saveBtn" class="btn btn-primary" type="submit">Save changes</button>
            <button id="resetBtn" class="btn btn-ghost" type="button">Reset</button>
          </div>
        </form>
      </section>

      <!-- Right: Session + actions -->
      <aside class="stack">
        <section class="card">
          <h3 style="margin:0 0 10px;">Session</h3>
          <div class="stack">
            <div><span class="badge" id="sessionBadge">Checking…</span></div>
            <div class="hr"></div>
            <div class="row">
              <button id="signOut" class="btn" type="button">Sign out</button>
              <a class="btn" href="/">Go to library</a>
            </div>
          </div>
        </section>

        <section class="card">
          <h3 style="margin:0 0 10px;">Sign-in method</h3>
          <p class="muted" style="margin:0 6px 12px 0;">
            You’re using passwordless sign-in (magic link) or OAuth. Password changes aren’t needed.
          </p>
          <div class="row">
            <a class="btn" href="/login">Send a sign-in link</a>
          </div>
        </section>

        <!-- Danger zone (optional) -->
        <section class="card">
          <h3 style="margin:0 0 10px;">Danger zone</h3>
          <p class="muted" style="margin:0 0 10px;">Delete your profile record (keeps your auth user).</p>
          <button id="deleteProfile" class="btn danger" type="button">Delete profile</button>
        </section>
      </aside>
    </div>
  </main>

  <%- include('./partials/footer') %>

  <script>
  (async function(){
    const sb = window.supabaseClient;
    const statusBox = document.getElementById('status');
    const sessionBadge = document.getElementById('sessionBadge');

    const emailEl = document.getElementById('email');
    const dnEl = document.getElementById('display_name');
    const nlEl = document.getElementById('newsletter');
    const puEl = document.getElementById('product_updates');

    const saveBtn = document.getElementById('saveBtn');
    const resetBtn = document.getElementById('resetBtn');
    const signOutBtn = document.getElementById('signOut');
    const deleteBtn = document.getElementById('deleteProfile');

    function showStatus(text, kind){ // kind: 'ok' | 'err' | 'info'
      if (!text) { statusBox.style.display='none'; statusBox.textContent=''; return; }
      statusBox.style.display='block';
      statusBox.textContent = text;
      statusBox.style.background = kind === 'ok' ? 'var(--green-1, #e7f8ef)' :
                                   kind === 'err' ? 'var(--red-1, #fdecec)' :
                                                    'var(--ink-1, #f5f5f5)';
      statusBox.style.border = '1px solid rgba(0,0,0,.08)';
    }

    function fillForm(u, p){
      emailEl.value = (u && u.email) || '';
      dnEl.value = (p && p.display_name) || (u && (u.user_metadata?.full_name || '')) || '';
      nlEl.checked = Boolean(p && p.newsletter);
      puEl.checked = (p && typeof p.product_updates === 'boolean') ? p.product_updates : true;
    }

    async function fetchProfile(uid){
      const { data, error, status } = await sb.from('profiles').select('*').eq('id', uid).maybeSingle();
      if (error && status !== 406) throw error;
      if (!data) return null;
      return data;
    }

    async function ensureProfile(uid){
      // create if absent (id only), respects RLS via with check (auth.uid() = id)
      const { error } = await sb.from('profiles').insert({ id: uid }).select().single();
      if (error && !String(error.message || '').includes('duplicate key')) throw error;
    }

    async function load(){
      if (!sb || !sb.auth || !sb.from) { showStatus('Auth not available. Please refresh.', 'err'); return; }

      sessionBadge.textContent = 'Checking…';
      const { data: { user }, error } = await sb.auth.getUser();
      if (error) { showStatus(error.message, 'err'); return; }
      if (!user) { window.location.href = '/login'; return; }

      sessionBadge.textContent = 'Signed in';
      try {
        let profile = await fetchProfile(user.id);
        if (!profile) {
          await ensureProfile(user.id);
          profile = await fetchProfile(user.id);
        }
        fillForm(user, profile);
        showStatus('Profile loaded.', 'ok');
      } catch (e) {
        showStatus(e.message || 'Failed to load profile.', 'err');
      }
    }

    // Save profile
    document.getElementById('profileForm').addEventListener('submit', async (e)=>{
      e.preventDefault();
      showStatus('');
      saveBtn.disabled = true; saveBtn.textContent = 'Saving…';
      const { data: { user } } = await sb.auth.getUser();
      if (!user) { window.location.href = '/login'; return; }

      const payload = {
        id: user.id,
        display_name: String(dnEl.value || '').trim(),
        newsletter: !!nlEl.checked,
        product_updates: !!puEl.checked
      };

      const { error } = await sb.from('profiles').upsert(payload, { onConflict: 'id' });
      if (error) {
        showStatus(error.message, 'err');
      } else {
        showStatus('Saved!', 'ok');
      }
      saveBtn.disabled = false; saveBtn.textContent = 'Save changes';
    });

    // Reset form
    resetBtn.addEventListener('click', async ()=>{
      showStatus('');
      const { data: { user } } = await sb.auth.getUser();
      if (!user) return;
      const p = await fetchProfile(user.id);
      fillForm(user, p);
    });

    // Sign out
    signOutBtn.addEventListener('click', async ()=>{
      try { await sb.auth.signOut(); } catch {}
      window.location.href = '/';
    });

    // Delete profile row (not the auth user)
    deleteBtn.addEventListener('click', async ()=>{
      if (!confirm('Delete your profile record? (This will not delete your login.)')) return;
      const { data: { user } } = await sb.auth.getUser();
      if (!user) return;
      const { error } = await sb.from('profiles').delete().eq('id', user.id);
      if (error) { showStatus(error.message, 'err'); return; }
      fillForm(user, null);
      showStatus('Profile deleted. A blank record will be recreated when needed.', 'ok');
    });

    // Boot
    load();
  })();
  </script>
</body>
</html>
