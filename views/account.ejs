<!doctype html>
<html lang="en">
<head>
  <%- include('./partials/head', {
    pageTitle: 'Account • BookLantern',
    pageDescription: 'Manage your BookLantern profile and email preferences.',
    canonicalUrl: (typeof canonicalUrl !== 'undefined' ? canonicalUrl : '')
  }) %>
  <style>
    .container{max-width:880px;margin:28px auto;padding:0 16px}
    .grid{display:grid;grid-template-columns:1fr;gap:16px}
    @media (min-width: 900px){ .grid{grid-template-columns: 1fr 320px} }
    .card{background:var(--surface,#fff);border:1px solid rgba(0,0,0,.06);border-radius:12px;padding:16px;box-shadow:0 10px 30px rgba(0,0,0,.06)}
    .row{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
    .stack{display:flex;flex-direction:column;gap:10px}
    .input, .checkbox-line{width:100%}
    .input{padding:10px 12px;border:1px solid var(--ink-3,#d1d5db);border-radius:8px;background:var(--surface,#fff)}
    .label{font-size:14px;font-weight:600}
    .help{font-size:12px;color:#6b7280}
    .btn{padding:10px 14px;border-radius:8px;border:1px solid rgba(0,0,0,.1);cursor:pointer;background:#f3f4f6;transition:opacity .15s ease}
    .btn[disabled]{opacity:.6;cursor:not-allowed}
    .btn-primary{background:#6366f1;color:#fff;border:0}
    .btn-ghost{background:transparent}
    .badge{display:inline-block;padding:2px 8px;border-radius:999px;background:#eef2ff;color:#3730a3;font-size:12px}
    .muted{color:#6b7280}
    .right{display:flex;justify-content:flex-end;gap:8px}
    .hr{height:1px;background:rgba(0,0,0,.06);margin:8px 0}
    .danger{color:#b91c1c}

    /* Toast */
    .toast {
      position: fixed;
      left: 50%;
      bottom: 22px;
      transform: translateX(-50%) translateY(16px);
      background: #16a34a;
      color: #fff;
      padding: 10px 14px;
      border-radius: 10px;
      box-shadow: 0 12px 32px rgba(22,163,74,.35);
      opacity: 0;
      pointer-events: none;
      z-index: 50;
    }
    .toast.show {
      animation: toast-in .18s ease-out forwards, toast-out .35s ease-in 2.2s forwards;
    }
    @keyframes toast-in {
      from {opacity:0; transform: translateX(-50%) translateY(16px) scale(.98)}
      to   {opacity:1; transform: translateX(-50%) translateY(0) scale(1)}
    }
    @keyframes toast-out {
      to {opacity:0; transform: translateX(-50%) translateY(12px)}
    }

    /* Small spinner for the button */
    .spin {
      width:14px;height:14px;border-radius:50%;
      border:2px solid rgba(255,255,255,.4);
      border-top-color:#fff;
      display:inline-block;vertical-align:middle;
      animation: rot .7s linear infinite;
      margin-right:8px;
    }
    @keyframes rot {to{transform:rotate(360deg)}}
  </style>
</head>
<body>
  <%- include('./partials/navbar') %>

  <main class="container">
    <h1 style="margin:4px 0 6px;">Account</h1>
    <p id="updatedStamp" class="muted" style="margin:0 0 16px;display:none;"></p>

    <div class="grid">
      <!-- Left: Profile form -->
      <section class="card">
        <h2 style="margin:0 0 8px;">Profile</h2>
        <p class="muted" style="margin:0 0 14px;">Update your public profile and email preferences.</p>

        <form id="profileForm" class="stack" novalidate>
          <!-- Email (read-only) -->
          <div class="stack">
            <label class="label" for="email">Email</label>
            <input id="email" class="input" type="email" autocomplete="email" readonly>
            <div class="help">Email is managed by your sign-in method.</div>
          </div>

          <!-- Display name -->
          <div class="stack">
            <label class="label" for="display_name">Display name</label>
            <input id="display_name" class="input" type="text" placeholder="Your name as others see it">
          </div>

          <!-- Preferences -->
          <div class="stack">
            <span class="label">Email preferences</span>
            <label class="row checkbox-line" style="justify-content:flex-start;">
              <input id="newsletter" type="checkbox">
              <span>Monthly reading newsletter</span>
            </label>
            <label class="row checkbox-line" style="justify-content:flex-start;">
              <input id="product_updates" type="checkbox">
              <span>Product updates & tips</span>
            </label>
          </div>

          <div class="right">
            <button id="saveBtn" class="btn btn-primary" type="submit">
              <span id="saveText">Save changes</span>
            </button>
            <button id="resetBtn" class="btn btn-ghost" type="button">Reset</button>
          </div>
        </form>
      </section>

      <!-- Right: Session + actions -->
      <aside class="stack">
        <section class="card">
          <h3 style="margin:0 0 10px;">Session</h3>
          <div class="stack">
            <div><span class="badge" id="sessionBadge">Checking…</span></div>
            <div class="hr"></div>
            <div class="row">
              <button id="signOut" class="btn" type="button">Sign out</button>
              <a class="btn" href="/">Go to library</a>
            </div>
          </div>
        </section>

        <section class="card">
          <h3 style="margin:0 0 10px;">Sign-in method</h3>
          <p class="muted" style="margin:0 6px 12px 0;">
            You’re using passwordless sign-in (magic link) or OAuth. Password changes aren’t needed.
          </p>
          <div class="row">
            <a class="btn" href="/login">Send a sign-in link</a>
          </div>
        </section>

        <!-- Danger zone (optional) -->
        <section class="card">
          <h3 style="margin:0 0 10px;">Danger zone</h3>
          <p class="muted" style="margin:0 0 10px;">Delete your profile record (keeps your auth user).</p>
          <button id="deleteProfile" class="btn danger" type="button">Delete profile</button>
        </section>
      </aside>
    </div>
  </main>

  <%- include('./partials/footer') %>

  <!-- Toast -->
  <div id="toast" class="toast" role="status" aria-live="polite">Saved!</div>

  <script>
  (async function(){
    const sb = window.supabaseClient;

    // form elements
    const emailEl = document.getElementById('email');
    const dnEl = document.getElementById('display_name');
    const nlEl = document.getElementById('newsletter');
    const puEl = document.getElementById('product_updates');
    const saveBtn = document.getElementById('saveBtn');
    const saveText = document.getElementById('saveText');
    const resetBtn = document.getElementById('resetBtn');
    const signOutBtn = document.getElementById('signOut');
    const deleteBtn = document.getElementById('deleteProfile');
    const sessionBadge = document.getElementById('sessionBadge');
    const updatedStamp = document.getElementById('updatedStamp');
    const toast = document.getElementById('toast');

    function showToast(text){
      toast.textContent = text || 'Saved!';
      toast.classList.remove('show'); // restart animation if needed
      // force reflow
      void toast.offsetWidth;
      toast.classList.add('show');
    }

    function setSaving(isSaving){
      if (isSaving){
        saveBtn.disabled = true;
        saveText.innerHTML = '<span class="spin"></span>Saving…';
      } else {
        saveBtn.disabled = false;
        saveText.textContent = 'Save changes';
      }
    }

    function fillForm(u, p){
      emailEl.value = (u && u.email) || '';
      dnEl.value = (p && p.display_name) || (u && (u.user_metadata?.full_name || '')) || '';
      nlEl.checked = Boolean(p && p.newsletter);
      puEl.checked = (p && typeof p.product_updates === 'boolean') ? p.product_updates : true;

      if (p && p.updated_at){
        const d = new Date(p.updated_at);
        updatedStamp.textContent = 'Profile updated on ' + d.toLocaleString();
        updatedStamp.style.display = 'block';
      } else {
        updatedStamp.style.display = 'none';
      }
    }

    async function fetchProfile(uid){
      const { data, error, status } = await sb
        .from('profiles')
        .select('id, display_name, newsletter, product_updates, updated_at')
        .eq('id', uid)
        .maybeSingle();
      if (error && status !== 406) throw error;
      return data || null;
    }

    async function ensureProfile(uid){
      const { error } = await sb.from('profiles').insert({ id: uid }).select().single();
      if (error && !String(error.message || '').includes('duplicate key')) throw error;
    }

    async function load(){
      sessionBadge.textContent = 'Checking…';
      const { data: { user }, error } = await sb.auth.getUser();
      if (error){ sessionBadge.textContent = 'Error'; return; }
      if (!user){ window.location.href = '/login'; return; }
      sessionBadge.textContent = 'Signed in';

      let profile = await fetchProfile(user.id);
      if (!profile){ await ensureProfile(user.id); profile = await fetchProfile(user.id); }
      fillForm(user, profile);
    }

    // Save
    document.getElementById('profileForm').addEventListener('submit', async (e)=>{
      e.preventDefault();
      setSaving(true);
      const { data: { user } } = await sb.auth.getUser();
      if (!user){ window.location.href = '/login'; return; }

      const payload = {
        id: user.id,
        display_name: String(dnEl.value || '').trim(),
        newsletter: !!nlEl.checked,
        product_updates: !!puEl.checked
      };

      const { data, error } = await sb
        .from('profiles')
        .upsert(payload, { onConflict: 'id' })
        .select('updated_at')
        .single();

      setSaving(false);

      if (error){
        showToast(error.message || 'Could not save');
        return;
      }

      if (data && data.updated_at){
        const d = new Date(data.updated_at);
        updatedStamp.textContent = 'Profile updated on ' + d.toLocaleString();
        updatedStamp.style.display = 'block';
      }
      showToast('Saved!');
    });

    // Reset
    resetBtn.addEventListener('click', async ()=>{
      const { data: { user } } = await sb.auth.getUser();
      if (!user) return;
      const p = await fetchProfile(user.id);
      fillForm(user, p);
    });

    // Sign out
    signOutBtn.addEventListener('click', async ()=>{
      try { await sb.auth.signOut(); } catch {}
      window.location.href = '/';
    });

    // Delete profile row
    deleteBtn.addEventListener('click', async ()=>{
      if (!confirm('Delete your profile record? (This will not delete your login.)')) return;
      const { data: { user } } = await sb.auth.getUser();
      if (!user) return;
      const { error } = await sb.from('profiles').delete().eq('id', user.id);
      if (!error){
        fillForm(user, null);
        showToast('Profile deleted');
      } else {
        showToast(error.message || 'Delete failed');
      }
    });

    load();
  })();
  </script>
</body>
</html>
