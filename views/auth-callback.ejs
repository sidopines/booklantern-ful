<!doctype html>
<html lang="en">
<head>
  <%- include('./partials/head', {
    pageTitle: 'Secure Redirect • BookLantern',
    pageDescription: 'Complete your login or password update.',
    canonicalUrl: (typeof canonicalUrl !== 'undefined' ? canonicalUrl : '')
  }) %>
  <style>
    .card { border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,.06); }
    .input { width: 100%; padding: 10px 12px; border: 1px solid var(--ink-3, #d1d5db); border-radius: 8px; }
    .btn { padding: 10px 14px; border-radius: 8px; border: 0; cursor: pointer; }
    .btn-primary { background: #6366f1; color: #fff; }
    .ink-2 { color: #6b7280; }
  </style>
</head>
<body>
  <%- include('./partials/navbar') %>

  <main class="container" style="max-width:720px; margin:28px auto; padding:0 16px;">
    <h1>Almost there…</h1>
    <p class="ink-2" id="state">Verifying session…</p>

    <!-- Password reset form (shown only for recovery with a valid session) -->
    <form id="pwForm" class="card" style="padding:16px; display:none;">
      <div class="stack" style="--gap:10px;">
        <input class="input" type="password" id="newpw" placeholder="New password (min 6 chars)" required minlength="6" autocomplete="new-password">
        <button class="btn btn-primary" type="submit">Update password</button>
        <div id="msg" class="ink-2" style="margin-top:6px;"></div>
      </div>
    </form>

    <p id="backLinks" class="ink-2" style="display:none; margin-top:14px;">
      <a href="/login">Back to login</a>
    </p>
  </main>

  <%- include('./partials/footer') %>

  <script>
  (async function () {
    // Requires window.supabaseClient created in ./partials/head
    const sb = window.supabaseClient;

    const state = document.getElementById('state');
    const form  = document.getElementById('pwForm');
    const msg   = document.getElementById('msg');
    const back  = document.getElementById('backLinks');

    function qs() { return new URLSearchParams(location.search); }
    function hs() { return new URLSearchParams((location.hash || '').replace(/^#/, '')); }
    function urlClean() {
      try { history.replaceState({}, document.title, location.pathname); } catch (_) {}
    }
    function urlCleanKeepQuery() {
      try { history.replaceState({}, document.title, location.pathname + location.search); } catch (_) {}
    }

    const q = qs();
    const h = hs();

    const type = String(q.get('type') || h.get('type') || '').toLowerCase();
    const err  = q.get('error_description') || h.get('error_description');

    // If Supabase provided an error in the URL, show it.
    if (err) {
      state.textContent = decodeURIComponent(err);
      back.style.display = 'block';
      urlClean();
      return;
    }

    // ---- 1) OAuth PKCE (?code=...) ----
    const code = q.get('code');
    if (code) {
      try {
        await sb.auth.exchangeCodeForSession(window.location.href);
      } catch (e) {
        console.warn('exchangeCodeForSession failed:', e);
      } finally {
        urlClean(); // remove code from URL
      }
    }

    // ---- 2) Legacy magic link (tokens in #hash) ----
    const access_token  = h.get('access_token');
    const refresh_token = h.get('refresh_token');
    if (access_token && refresh_token) {
      try {
        await sb.auth.setSession({ access_token, refresh_token });
      } catch (e) {
        console.warn('setSession failed:', e);
      } finally {
        urlCleanKeepQuery(); // keep ?type if present; drop hash
      }
    }

    // ---- 3) New verifyOtp flow (?type=magiclink|signup|email_change|… & token_hash=… & email=…) ----
    const token_hash = q.get('token_hash');
    const email = q.get('email') || q.get('user_email') || '';
    if (token_hash && type) {
      try {
        await sb.auth.verifyOtp({ type, token_hash, email });
      } catch (e) {
        console.warn('verifyOtp failed:', e);
        state.textContent = e && e.message ? e.message : 'Unable to verify your link. Please request a new one.';
        back.style.display = 'block';
        urlClean(); // remove query
        return;
      }
      urlClean(); // verified — remove query params
    }

    // Do we have a session now?
    let { data: { session } } = await sb.auth.getSession();

    // Password recovery: show the password form if session is valid.
    if (type === 'recovery') {
      if (!session) {
        state.textContent = 'Your reset link is invalid or expired. Please request a new one.';
        back.style.display = 'block';
        return;
      }

      state.textContent = 'Enter a new password:';
      form.style.display = 'block';

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const pw = String(document.getElementById('newpw').value || '').trim();
        if (pw.length < 6) { msg.textContent = 'Password must be at least 6 characters.'; return; }

        msg.textContent = 'Updating…';
        const { error } = await sb.auth.updateUser({ password: pw });
        if (error) { msg.textContent = error.message; return; }

        state.textContent = 'Password updated. Redirecting to login…';
        form.style.display = 'none';
        setTimeout(() => { location.href = '/login?reset=done'; }, 600);
      });

      return;
    }

    // Email confirmations / magic links
    if (['signup','magiclink','email_change','invitation','verified'].includes(type)) {
      if (!session) {
        state.textContent = 'We couldn’t complete sign-in from that link. Please request a new magic link.';
        back.style.display = 'block';
        return;
      }
      // fall through to redirect below
    }

    // Final redirects
    if (session) {
      try {
        const { data } = await sb.auth.getUser();
        const user = data && data.user;
        const role = (user && user.app_metadata && user.app_metadata.role) || '';
        state.textContent = 'Signed in. Redirecting…';
        setTimeout(() => { location.href = (role === 'admin') ? '/admin' : '/account'; }, 300);
      } catch (_e) {
        state.textContent = 'Signed in. Redirecting…';
        setTimeout(() => { location.href = '/account'; }, 300);
      }
    } else {
      state.textContent = 'Session not found. You can close this tab and try logging in again.';
      back.style.display = 'block';
    }
  })();
  </script>
</body>
</html>
