<!doctype html>
<html lang="en">
<head>
  <%- include('./partials/head', {
    pageTitle: 'Secure Redirect • BookLantern',
    pageDescription: 'Complete your login or password update.',
    canonicalUrl: (typeof canonicalUrl !== 'undefined' ? canonicalUrl : '')
  }) %>
</head>
<body>
  <%- include('./partials/navbar') %>

  <main class="container" style="max-width:720px; margin:28px auto; padding:0 16px;">
    <h1>Almost there…</h1>
    <p class="ink-2" id="state">Verifying session…</p>

    <!-- Recovery (set new password) -->
    <form id="pwForm" class="card" style="padding:16px; display:none;">
      <div class="stack" style="--gap:10px;">
        <input class="input" type="password" id="newpw" placeholder="New password (min 8 chars)" minlength="8" required>
        <button class="btn btn-primary" type="submit">Update password</button>
        <div id="msg" class="ink-2"></div>
      </div>
    </form>
  </main>

  <%- include('./partials/footer') %>

  <script>
  (async function () {
    const sb = window.supabaseClient;
    const state = document.getElementById('state');
    const pwForm = document.getElementById('pwForm');
    const msg = document.getElementById('msg');

    // Parse both query (?type=...) and hash (#access_token=...&type=...)
    const qs = new URLSearchParams(location.search);
    const hs = new URLSearchParams(location.hash.replace(/^#/, ''));
    const type = (qs.get('type') || hs.get('type') || '').toLowerCase();

    // Handle password recovery: Supabase 302 → this page with tokens in the URL hash.
    if (type === 'recovery') {
      // Make sure we have a session first (the hash should contain access_token)
      const { data: s } = await sb.auth.getSession();

      if (!s || !s.session) {
        // Try to exchange the URL (with hash) into a session just in case
        // (Supabase JS does this automatically on page load; this is a safety net.)
        await sb.auth.getSession();
      }

      state.textContent = 'Enter a new password:';
      pwForm.style.display = 'block';

      pwForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const pw = document.getElementById('newpw').value.trim();
        if (pw.length < 8) { msg.textContent = 'Password must be at least 8 characters.'; return; }

        const { error } = await sb.auth.updateUser({ password: pw });
        if (error) {
          msg.textContent = error.message || 'Could not update password.';
          return;
        }
        state.textContent = '✅ Password updated. You can log in now.';
        pwForm.style.display = 'none';
        // Sign out the recovery session and send them to login with a banner
        try { await sb.auth.signOut(); } catch(e){}
        setTimeout(() => { location.replace('/login?resetdone=1'); }, 600);
      });
      return;
    }

    // Email confirmation (signup) or OAuth end
    // If a session exists, we’re signed in—go to Account
    const { data: { session } } = await sb.auth.getSession();
    if (session) {
      state.textContent = 'Signed in. Redirecting…';
      location.replace('/account');
      return;
    }

    // If it’s just a confirmation (no active session), show a friendly message
    if ((qs.get('type') || hs.get('type')) === 'signup') {
      state.textContent = '✅ Your email has been verified. You can log in now.';
      return;
    }

    state.textContent = 'Could not complete sign-in. Close this tab and try logging in again.';
  })();
  </script>
</body>
</html>
