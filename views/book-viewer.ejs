<!-- views/book-viewer.ejs (or bookviewer.ejs ‚Äî keep name consistent with server.js) -->
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: `${book.title} | Read Book`,
    pageDescription: `Read ${book.title} online via BookLantern. Bookmark and save to favorites.`
  }) %>
  <style>
    body{
      font-family: Arial, sans-serif;
      background:#f4f4f4;
      margin:0;
      padding:2rem;
    }
    h1{margin-bottom:1rem;}
    iframe{
      width:100%;
      height:80vh;
      border:1px solid #ccc;
      border-radius:8px;
      background:#fff;
    }
    .action-buttons{
      margin-top:1rem;
    }
    .action-buttons form{
      display:inline-block;
      margin-right:1rem;
    }
    .action-buttons button{
      padding:.5rem 1rem;
      font-size:.9rem;
      background:#0077cc;
      color:#fff;
      border:none;
      border-radius:5px;
      cursor:pointer;
    }
    .action-buttons button.remove{
      background:#cc0000;
    }
    #bookmark-status{
      margin-top:1rem;
      font-size:.9rem;
      color:green;
    }
  </style>
</head>
<body>
  <h1><%= book.title %></h1>

  <% 
    // prefer archiveId, fall back to identifier if your schema uses it
    const streamId = book.archiveId || book.identifier; 
  %>

  <!-- Embedded Archive.org Book -->
  <iframe
    id="book-frame"
    src="https://archive.org/stream/<%= streamId %>?ui=embed#page=1"
    allowfullscreen
  ></iframe>

  <!-- Bookmark & Favorites UI -->
  <div class="action-buttons">
    <form method="POST" action="/read/book/<%= book._id %>/favorite">
      <button type="submit" class="<%= isFavorite ? 'remove' : '' %>">
        <%= isFavorite ? '‚ùå Remove from Favorites' : '‚ù§Ô∏è Add to Favorites' %>
      </button>
    </form>
  </div>

  <div id="bookmark-status">‚è≥ Loading last saved page...</div>

  <script>
    const userLoggedIn = <%= user ? 'true' : 'false' %>;
    const bookId = "<%= book._id %>";
    const streamId = "<%= streamId %>";
    const iframe = document.getElementById('book-frame');
    const bookmarkStatus = document.getElementById('bookmark-status');

    // Load last saved page
    fetch(`/read/book/${bookId}/bookmark`)
      .then(res => {
        if(!res.ok) throw new Error('not ok');
        return res.json();
      })
      .then(data => {
        const page = data.page || 1;
        iframe.src = `https://archive.org/stream/${streamId}?ui=embed#page=${page}`;
        bookmarkStatus.textContent = `üìñ Resuming from page ${page}`;
      })
      .catch(() => {
        bookmarkStatus.textContent = "‚ö†Ô∏è Failed to load last bookmark.";
      });

    // Save bookmark on page hide (more reliable than beforeunload for some browsers)
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') saveBookmark();
    });
    window.addEventListener('beforeunload', saveBookmark);

    function saveBookmark() {
      if (!userLoggedIn) return;
      const currentPage = getCurrentPageFromHash(iframe.src);
      if (currentPage) {
        navigator.sendBeacon
          ? navigator.sendBeacon(`/read/book/${bookId}/bookmark`, JSON.stringify({ page: currentPage }))
          : fetch(`/read/book/${bookId}/bookmark`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ page: currentPage })
            });
      }
    }

    function getCurrentPageFromHash(url) {
      const match = url.match(/#page=(\d+)/);
      return match ? parseInt(match[1], 10) : 1;
    }
  </script>
</body>
</html>
