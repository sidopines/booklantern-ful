<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: pageTitle || 'BookLantern â€” Read & Learn',
    pageDescription: pageDescription || 'Free books and educational videos, unified in a beautiful reading experience.'
  }) %>
  <link rel="stylesheet" href="/css/site.css">
</head>
<body class="home">
  <%- include('./partials/navbar.ejs') %>

  <!-- HERO -->
  <section class="hero">
    <div class="hero-inner fade-in">
      <h1>Books, beautifully.</h1>
      <p>
        Search the open stacksâ€”Archive.org, Open Library, and Project Gutenberg.
        Read in a focused, book-like experience that stays out of the way.
      </p>

      <form class="searchbar" action="/read" method="GET">
        <input type="text" name="query" placeholder="Try â€˜Platoâ€™, â€˜Socratesâ€™, â€˜Physicsâ€™, â€˜Bibleâ€™â€¦" />
        <button class="btn" type="submit">Search Books</button>
        <a class="btn alt" href="/watch">Explore Videos</a>
      </form>

      <div class="hero-cta">
        <% if (!user) { %>
          <a class="btn ghost" href="/register">Create a free account</a>
        <% } %>
      </div>
    </div>
  </section>

  <!-- TRENDING (single instance) -->
  <section class="section section-tight">
    <div class="container">
      <div class="shelf-header">
        <h2>Trending now</h2>
        <div class="hint">Latest from BookLantern</div>
      </div>
      <div id="featured-grid" class="grid" aria-live="polite"></div>
    </div>
  </section>

  <!-- CURATED SHELVES -->
  <section class="section">
    <div class="container" id="shelves"></div>
  </section>

  <!-- HOW IT WORKS -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>How it works</h2>
        <div class="hint">Simple, fast, delightful</div>
      </div>
      <div class="tiles">
        <div class="tile">
          <h3>1) Find it fast</h3>
          <p>We search trusted open libraries and surface copies you can actually read.</p>
        </div>
        <div class="tile">
          <h3>2) Read like a book</h3>
          <p>Turn pages with arrows, stay focused with a clean layout that feels like print.</p>
        </div>
        <div class="tile">
          <h3>3) Save your place</h3>
          <p>Create a free account to favorite titles and pick up where you left off anywhere.</p>
        </div>
      </div>
    </div>
  </section>

  <footer class="footer">
    &copy; <%= new Date().getFullYear() %> BookLantern â€¢ Built on open libraries â€¢ <a href="/about">About</a>
  </footer>

  <!-- HOMEPAGE POPULATION SCRIPT -->
  <script>
    (function(){
      const IS_LOGGED_IN = <%= !!user %>;

      const featuredGrid = document.getElementById('featured-grid');
      const shelvesRoot  = document.getElementById('shelves');

      // track identifiers shown in Trending to avoid duplicates below
      const SEEN = new Set();

      function escapeHtml(s){
        return String(s || '')
          .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
          .replace(/"/g,'&quot;').replace(/'/g,'&#39;');
      }

      function buildHrefFromCard(b){
        if (b && b.href) return b.href;
        const src = (b.source || '').toLowerCase();
        const id  = b.identifier || '';
        const ia  = b.archiveId || (src === 'archive' ? id : '');
        if (ia) return '/read/book/' + encodeURIComponent(ia);
        if (src === 'gutenberg') {
          const gid = String(id).replace(/^gutenberg:/,'');
          const qs  = b.readerUrl ? ('?u=' + encodeURIComponent(b.readerUrl)) : '';
          return '/read/gutenberg/' + encodeURIComponent(gid) + '/reader' + qs;
        }
        return b.readerUrl || '#';
      }
      function brandFromSource(src){
        const s = (src || '').toLowerCase();
        if (s === 'archive') return 'Archive.org';
        if (s === 'gutenberg') return 'Project Gutenberg';
        if (s === 'openlibrary') return 'Open Library';
        return 'Book';
      }
      function gatedHref(dest){
        if (IS_LOGGED_IN) return dest;
        return '/login?next=' + encodeURIComponent(dest || '/');
      }

      // gradient fallback tile (never show an empty card)
      function fallbackTile(title){
        const t = escapeHtml(title || 'Explore');
        return `
          <div class="thumb" style="background:linear-gradient(180deg,#f4f7ff,#eefcf7);display:flex;align-items:center;justify-content:center;">
            <div style="text-align:center;">
              <div style="font-size:40px;line-height:1.1">ðŸ“–</div>
              <div style="margin-top:6px;color:#667085;font-size:12px">${t}</div>
            </div>
          </div>`;
      }

      // attach onerror fallbacks AFTER we inject the grid
      function enableImageFallbacks(root){
        root.querySelectorAll('img[data-cover]').forEach(img => {
          img.addEventListener('error', () => {
            const title = img.getAttribute('data-title') || 'Explore';
            const parent = img.parentElement;
            if (parent) parent.innerHTML = fallbackTile(title);
          }, { once:true });
        });
      }

      function cardTemplate(b){
        const dest  = gatedHref(buildHrefFromCard(b));
        const brand = brandFromSource(b.source);
        const internal = IS_LOGGED_IN && (b.archiveId || (b.source||'').toLowerCase()==='archive' || (b.source||'').toLowerCase()==='gutenberg');

        const title = escapeHtml(b.title || '');
        const thumb = b.cover
          ? `<div class="thumb"><img data-cover data-title="${title}" src="${b.cover}" alt="${title}" loading="lazy" referrerpolicy="no-referrer"></div>`
          : fallbackTile(b.title);

        return `
          <article class="card fade-in">
            <a href="${dest}" ${internal ? '' : 'rel="noopener"'} style="text-decoration:none;color:inherit">
              ${thumb}
              <div class="meta">
                <span class="badge">${brand}</span>
                <h3>${title}</h3>
                <p>${escapeHtml(b.creator || '')}</p>
              </div>
            </a>
          </article>
        `;
      }

      function renderGrid(items, targetEl){
        if (!items || !items.length) {
          targetEl.innerHTML = '<div class="hint">No books found right now. Try a search above.</div>';
          return;
        }
        targetEl.innerHTML = items.map(cardTemplate).join('');
        enableImageFallbacks(targetEl);
      }

      function shelfTemplate(shelf){
        // remove anything already shown in Trending
        const deduped = (shelf.items || []).filter(x => {
          const key = (x.identifier || x.title || '').toString();
          return key && !SEEN.has(key);
        }).slice(0, 12);

        const cards = deduped.map(cardTemplate).join('');
        // record these so we donâ€™t repeat in later shelves either
        deduped.forEach(x => SEEN.add((x.identifier || x.title || '').toString()));

        return `
          <div class="shelf">
            <div class="shelf-header">
              <h2>${escapeHtml(shelf.title)}</h2>
              <a class="hint" href="/read?query=${encodeURIComponent(shelf.q)}">See more</a>
            </div>
            <div class="shelf-row">
              ${cards}
            </div>
          </div>
        `;
      }

      async function loadFeatured(){
        try {
          const r = await fetch('/api/featured-books', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('Bad status');
          const data = await r.json();
          const items =
            Array.isArray(data) ? data :
            (Array.isArray(data.items) ? data.items :
            (Array.isArray(data.results) ? data.results : []));
          // mark as seen for dedupe
          items.forEach(b => SEEN.add((b.identifier || b.title || '').toString()));
          renderGrid(items, featuredGrid);
        } catch (e) {
          featuredGrid.innerHTML = '<div class="hint">Could not load featured books. Try refreshing.</div>';
          console.error('featured error', e);
        }
      }

      async function loadShelves(){
        try {
          const r = await fetch('/api/shelves', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('Bad status');
          const data = await r.json();
          const shelves = Array.isArray(data.shelves) ? data.shelves : [];
          shelvesRoot.innerHTML = shelves.map(shelfTemplate).join('');
          enableImageFallbacks(shelvesRoot);
        } catch (e) {
          console.error('shelves error', e);
        }
      }

      loadFeatured().then(loadShelves);
    })();
  </script>
</body>
</html>
