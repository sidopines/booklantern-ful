<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: pageTitle || 'BookLantern — Read & Learn',
    pageDescription: pageDescription || 'Free books and educational videos, unified in a beautiful reading experience.'
  }) %>
</head>
<body>
  <%- include('./partials/navbar.ejs') %>

  <!-- HERO -->
  <section class="hero">
    <div class="hero-inner fade-in">
      <h1>Books, beautifully.</h1>
      <p>
        Search the open stacks—Archive.org, Open Library, and Project Gutenberg.
        Read in a focused, book-like experience that stays out of the way.
      </p>

      <!-- Search bar that goes to /read -->
      <form class="searchbar" action="/read" method="GET">
        <input type="text" name="query" placeholder="Try ‘Plato’, ‘Socrates’, ‘Physics’, ‘Bible’…" />
        <button class="btn" type="submit">Search Books</button>
        <a class="btn alt" href="/watch">Explore Videos</a>
      </form>

      <div class="hero-cta">
        <% if (!user) { %>
          <a class="btn ghost" href="/register">Create a free account</a>
        <% } %>
      </div>
    </div>
  </section>

  <!-- TRENDING (one single section) -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>Trending now</h2>
        <div class="hint">Latest from BookLantern</div>
      </div>
      <div id="trending-grid" class="grid" aria-live="polite"></div>
    </div>
  </section>

  <!-- CURATED SHELVES -->
  <section class="section">
    <div class="container" id="shelves"></div>
  </section>

  <!-- POPULAR TOPICS -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>Popular Topics</h2>
        <div class="hint">Start reading in one tap</div>
      </div>
      <div class="topic-row">
        <a class="topic" href="/read?query=Philosophy">Philosophy</a>
        <a class="topic" href="/read?query=Science">Science</a>
        <a class="topic" href="/read?query=History">History</a>
        <a class="topic" href="/read?query=Mathematics">Mathematics</a>
        <a class="topic" href="/read?query=Classics">Classics</a>
        <a class="topic" href="/read?query=Poetry">Poetry</a>
        <a class="topic" href="/read?query=Biology">Biology</a>
        <a class="topic" href="/read?query=Economics">Economics</a>
      </div>
    </div>
  </section>

  <!-- HOW IT WORKS -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>How it works</h2>
        <div class="hint">Simple, fast, delightful</div>
      </div>
      <div class="tiles">
        <div class="tile">
          <h3>1) Find it fast</h3>
          <p>We search trusted open libraries and surface copies you can actually read.</p>
        </div>
        <div class="tile">
          <h3>2) Read like a book</h3>
          <p>Turn pages with arrows, stay focused with a clean layout that feels like print.</p>
        </div>
        <div class="tile">
          <h3>3) Save your place</h3>
          <p>Create a free account to favorite titles and pick up where you left off anywhere.</p>
        </div>
      </div>
    </div>
  </section>

  <footer class="footer">
    &copy; <%= new Date().getFullYear() %> BookLantern • Built on open libraries • <a href="/about">About</a>
  </footer>

  <!-- HOMEPAGE POPULATION SCRIPT -->
  <script>
    (function(){
      const IS_LOGGED_IN = <%= !!user %>;

      const trendingGrid = document.getElementById('trending-grid');
      const shelvesRoot  = document.getElementById('shelves');

      function escapeHtml(s){
        return String(s || '')
          .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
          .replace(/"/g,'&quot;').replace(/'/g,'&#39;');
      }

      function brandFromSource(src){
        const s = (src || '').toLowerCase();
        if (s === 'archive') return 'Archive.org';
        if (s === 'gutenberg') return 'Project Gutenberg';
        if (s === 'openlibrary') return 'Open Library';
        if (s === 'local') return 'BookLantern';
        return 'Book';
      }

      function buildHrefFromCard(b){
        if (b && b.href) return b.href; // server provided link
        const src = (b.source || '').toLowerCase();
        const id  = b.identifier || '';
        const ia  = b.archiveId || (src === 'archive' ? id : '');
        if (ia) return '/read/book/' + encodeURIComponent(ia);
        if (src === 'gutenberg') {
          const gid = String(id).replace(/^gutenberg:/,'');
          const qs  = b.readerUrl ? ('?u=' + encodeURIComponent(b.readerUrl)) : '';
          return '/read/gutenberg/' + encodeURIComponent(gid) + '/reader' + qs;
        }
        return b.readerUrl || '#';
      }

      // Gate: visitors → /login?next=...
      function gatedHref(dest){
        return IS_LOGGED_IN ? dest : '/login?next=' + encodeURIComponent(dest || '/');
      }

      function imgTag(src, alt){
        const safeAlt = escapeHtml(alt || '');
        // If image fails (404/CORS), fall back to local SVG
        return `<img src="${src}" alt="${safeAlt}" loading="lazy" onerror="this.onerror=null;this.src='/img/cover-fallback.svg'">`;
      }

      function cardTemplate(b){
        const dest  = gatedHref(buildHrefFromCard(b));
        const brand = brandFromSource(b.source);
        const hasInternal = IS_LOGGED_IN && (
          (b.archiveId) ||
          (b.source||'').toLowerCase()==='archive' ||
          (b.source||'').toLowerCase()==='gutenberg'
        );
        return `
          <article class="card fade-in">
            <a href="${dest}" ${hasInternal ? '' : 'rel="noopener"'} style="text-decoration:none;color:inherit">
              <div class="thumb">
                ${b.cover ? imgTag(b.cover, b.title) : imgTag('/img/cover-fallback.svg', b.title)}
              </div>
              <div class="meta">
                <span class="badge">${brand}</span>
                <h3>${escapeHtml(b.title || '')}</h3>
                <p>${escapeHtml(b.creator || '')}</p>
              </div>
            </a>
          </article>
        `;
      }

      function renderGrid(items, targetEl){
        if (!items || !items.length) {
          targetEl.innerHTML = '<div class="hint">No books found right now. Try a search above.</div>';
          return;
        }
        targetEl.innerHTML = items.map(cardTemplate).join('');
      }

      function shelfTemplate(shelf){
        const cards = (shelf.items || []).map(cardTemplate).join('');
        return `
          <div class="shelf">
            <div class="shelf-header">
              <h2>${escapeHtml(shelf.title)}</h2>
              <a class="hint" href="/read?query=${encodeURIComponent(shelf.q)}">See more</a>
            </div>
            <div class="shelf-row">
              ${cards}
            </div>
          </div>
        `;
      }

      // Load “Trending now” (uses local Books first; falls back to curated)
      async function loadTrending(){
        try {
          const r = await fetch('/api/featured-books', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('Bad status');
          const data = await r.json();
          const items =
            Array.isArray(data) ? data :
            (Array.isArray(data.items) ? data.items :
            (Array.isArray(data.results) ? data.results : []));
          // De-dupe just in case
          const seen = new Set();
          const unique = [];
          for (const b of items) {
            const k = ((b.title||'') + '|' + (b.creator||'')).toLowerCase();
            if (seen.has(k)) continue;
            seen.add(k);
            unique.push(b);
          }
          renderGrid(unique, trendingGrid);
        } catch (e) {
          console.error('trending error', e);
          trendingGrid.innerHTML = '<div class="hint">Could not load books. Try refreshing.</div>';
        }
      }

      async function loadShelves(){
        try {
          const r = await fetch('/api/shelves', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('Bad status');
          const data = await r.json();
          const shelves = Array.isArray(data.shelves) ? data.shelves : [];
          shelvesRoot.innerHTML = shelves.map(shelfTemplate).join('');
        } catch (e) {
          console.error('shelves error', e);
        }
      }

      loadTrending();
      loadShelves();

      // Optional “New books added” toast if ?refreshed=1 is present
      (function toastIfRefreshed(){
        if (!/[\?&]refreshed=1\b/.test(location.search)) return;
        const b = document.createElement('div');
        b.style.cssText = 'position:fixed;bottom:20px;left:50%;transform:translateX(-50%);background:#111;color:#fff;padding:10px 14px;border-radius:12px;box-shadow:0 8px 28px rgba(0,0,0,.25);z-index:9999;font-weight:600';
        b.textContent = 'New books added';
        document.body.appendChild(b);
        setTimeout(()=>b.remove(), 2600);
      })();
    })();
  </script>
</body>
</html>
