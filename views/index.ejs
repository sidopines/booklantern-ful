<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: pageTitle || 'BookLantern — Read & Learn',
    pageDescription: pageDescription || 'Free books and educational videos, unified in a beautiful reading experience.'
  }) %>
  <link rel="stylesheet" href="/css/site.css">
</head>
<body>
  <%- include('./partials/navbar.ejs') %>

  <!-- HERO -->
  <section class="hero">
    <div class="hero-inner fade-in">
      <h1>Read brilliantly.</h1>
      <p>
        Search across Archive.org, Open Library, and Project Gutenberg.
        Read inside a clean, unified viewer — no clutter, just books.
      </p>

      <!-- Search bar that goes to /read -->
      <form class="searchbar" action="/read" method="GET">
        <input type="text" name="query" placeholder="Try ‘Plato’, ‘Socrates’, ‘Physics’, ‘Bible’…" />
        <button class="btn" type="submit">Search Books</button>
        <a class="btn alt" href="/watch">Explore Videos</a>
      </form>

      <div class="hero-cta">
        <% if (!user) { %>
          <a class="btn ghost" href="/register">Create a free account</a>
        <% } %>
      </div>
    </div>
  </section>

  <!-- FEATURED BOOKS (populated via /api/featured-books) -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>Featured Books</h2>
        <div class="hint">Curated picks from multiple libraries</div>
      </div>
      <div id="featured-grid" class="grid" aria-live="polite">
        <!-- JS will fill cards here -->
      </div>
    </div>
  </section>

  <!-- CURATED SHELVES (from /api/shelves) -->
  <section class="section">
    <div class="container" id="shelves">
      <!-- JS will render multiple horizontal shelves here -->
    </div>
  </section>

  <!-- POPULAR TOPICS -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>Popular Topics</h2>
        <div class="hint">Quick-start your reading</div>
      </div>
      <div class="topic-row">
        <a class="topic" href="/read?query=Philosophy">Philosophy</a>
        <a class="topic" href="/read?query=Science">Science</a>
        <a class="topic" href="/read?query=History">History</a>
        <a class="topic" href="/read?query=Mathematics">Mathematics</a>
        <a class="topic" href="/read?query=Classics">Classics</a>
        <a class="topic" href="/read?query=Poetry">Poetry</a>
        <a class="topic" href="/read?query=Biology">Biology</a>
        <a class="topic" href="/read?query=Economics">Economics</a>
      </div>
    </div>
  </section>

  <!-- HOW IT WORKS -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>How BookLantern Works</h2>
        <div class="hint">Three simple steps</div>
      </div>
      <div class="tiles">
        <div class="tile">
          <h3>1) Search everywhere</h3>
          <p>We look across Archive.org, Open Library, and Gutenberg for high-quality, readable copies.</p>
        </div>
        <div class="tile">
          <h3>2) One clean reader</h3>
          <p>Open results inside our unified reader with pagination, dark chrome, and bookmark support.</p>
        </div>
        <div class="tile">
          <h3>3) Save & resume</h3>
          <p>Log in to favorite titles and resume where you left off — your progress stays with you.</p>
        </div>
      </div>
    </div>
  </section>

  <footer class="footer">
    &copy; <%= new Date().getFullYear() %> BookLantern • Built on open libraries • <a href="/about">About</a>
  </footer>

  <!-- HOMEPAGE POPULATION SCRIPT -->
  <script>
    (function(){
      const featuredGrid = document.getElementById('featured-grid');
      const shelvesRoot  = document.getElementById('shelves');

      function escapeHtml(s){
        return String(s || '')
          .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
          .replace(/"/g,'&quot;').replace(/'/g,'&#39;');
      }

      function buildHrefFromCard(b){
        // Prefer href provided by API
        if (b && b.href) return b.href;

        // Fallback: reconstruct like /read page
        const src = (b.source || '').toLowerCase();
        const id  = b.identifier || '';
        const ia  = b.archiveId || (src === 'archive' ? id : '');
        if (ia) {
          return '/read/book/' + encodeURIComponent(ia);
        } else if (src === 'gutenberg') {
          const gid = String(id).replace(/^gutenberg:/,'');
          const qs  = b.readerUrl ? ('?u=' + encodeURIComponent(b.readerUrl)) : '';
          return '/read/gutenberg/' + encodeURIComponent(gid) + '/reader' + qs;
        }
        return b.readerUrl || '#';
      }

      function brandFromSource(src){
        const s = (src || '').toLowerCase();
        if (s === 'archive') return 'Archive.org';
        if (s === 'gutenberg') return 'Project Gutenberg';
        if (s === 'openlibrary') return 'Open Library';
        return 'Book';
        }

      function cardTemplate(b){
        const href  = buildHrefFromCard(b);
        const brand = brandFromSource(b.source);
        const internal = (b.archiveId || (b.source||'').toLowerCase()==='archive' || (b.source||'').toLowerCase()==='gutenberg');

        return `
          <article class="card fade-in">
            <a href="${href}" ${internal ? '' : 'target="_blank" rel="noopener"'} style="text-decoration:none;color:inherit">
              <div class="thumb">
                ${b.cover ? `<img src="${b.cover}" alt="${escapeHtml(b.title || '')}" loading="lazy" referrerpolicy="no-referrer">` : ''}
              </div>
              <div class="meta">
                <span class="badge">${brand}</span>
                <h3>${escapeHtml(b.title || '')}</h3>
                <p>${escapeHtml(b.creator || '')}</p>
              </div>
            </a>
          </article>
        `;
      }

      function renderGrid(items, targetEl){
        if (!items || !items.length) {
          targetEl.innerHTML = '<div class="hint">No books found right now. Try a search above.</div>';
          return;
        }
        targetEl.innerHTML = items.map(cardTemplate).join('');
      }

      function shelfTemplate(shelf){
        const cards = (shelf.items || []).map(cardTemplate).join('');
        return `
          <div class="shelf">
            <div class="shelf-header">
              <h2>${escapeHtml(shelf.title)}</h2>
              <a class="hint" href="/read?query=${encodeURIComponent(shelf.q)}">See more</a>
            </div>
            <div class="shelf-row">
              ${cards}
            </div>
          </div>
        `;
      }

      async function loadFeatured(){
        try {
          const r = await fetch('/api/featured-books', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('Bad status');
          const data = await r.json();
          const items = Array.isArray(data.items) ? data.items : [];
          renderGrid(items, featuredGrid);
        } catch (e) {
          featuredGrid.innerHTML = '<div class="hint">Could not load featured books. Try refreshing.</div>';
          console.error('featured error', e);
        }
      }

      async function loadShelves(){
        try {
          const r = await fetch('/api/shelves', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('Bad status');
          const data = await r.json();
          const shelves = Array.isArray(data.shelves) ? data.shelves : [];
          if (!shelves.length) {
            shelvesRoot.innerHTML = '';
            return;
          }
          shelvesRoot.innerHTML = shelves.map(shelfTemplate).join('');
        } catch (e) {
          console.error('shelves error', e);
        }
      }

      loadFeatured();
      loadShelves();
    })();
  </script>
</body>
</html>
