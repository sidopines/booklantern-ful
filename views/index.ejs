<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: pageTitle || 'BookLantern — Your Open Library',
    pageDescription: pageDescription || 'Search open collections and read in a beautiful, book-like viewer.'
  }) %>
  <link rel="stylesheet" href="/css/site.css">
</head>
<body class="home">
  <%- include('./partials/navbar.ejs') %>

  <!-- HERO -->
  <section class="hero gradient">
    <div class="hero-inner">
      <h1 class="headline">Your library, beautifully simple.</h1>
      <p class="subhead">
        Search the best open collections—Archive.org, Open Library, and Project Gutenberg.
        Read in a calm, book-like experience that stays out of the way.
      </p>

      <!-- Search bar that goes to /read -->
      <form class="searchbar" action="/read" method="GET">
        <input type="text" name="query" placeholder="Try ‘Plato’, ‘Socrates’, ‘Physics’, ‘Bible’…" />
        <button class="btn" type="submit">Search books</button>
        <a class="btn alt" href="/watch">Explore videos</a>
      </form>

      <div class="benefits">
        <span>★ No ads</span>
        <span>• Public-domain & open access</span>
        <span>• Bookmarks & favorites</span>
      </div>

      <% if (!user) { %>
        <div class="hero-cta">
          <a class="btn ghost" href="/register">Create a free account</a>
        </div>
      <% } %>
    </div>
  </section>

  <!-- TRENDING NOW (SSR + instant paint) -->
  <section class="section">
    <div class="container">
      <div class="shelf-header">
        <h2>Trending now</h2>
        <a class="hint" href="/read?query=Classics">See more</a>
      </div>

      <div id="featured-grid" class="grid" aria-live="polite">
        <% if (Array.isArray(featuredSSR) && featuredSSR.length) { %>
          <% featuredSSR.forEach(function(b){ 
               const src = (b.source || '').toLowerCase();
               const id  = b.identifier || '';
               const ia  = b.archiveId || (src === 'archive' ? id : '');
               let dest  = '#';

               if (ia) {
                 dest = '/read/book/' + encodeURIComponent(ia);
               } else if (src === 'gutenberg') {
                 const gid = String(id).replace(/^gutenberg:/,'');
                 const qs  = b.readerUrl ? ('?u=' + encodeURIComponent(b.readerUrl)) : '';
                 dest = '/read/gutenberg/' + encodeURIComponent(gid) + '/reader' + qs;
               } else if (b.readerUrl) {
                 dest = b.readerUrl;
               }

               const href = (user ? dest : ('/login?next=' + encodeURIComponent(dest)));
               const brand = src === 'archive' ? 'Archive.org'
                           : src === 'gutenberg' ? 'Project Gutenberg'
                           : src === 'openlibrary' ? 'Open Library'
                           : 'Book';
          %>
            <article class="card">
              <a href="<%= href %>" style="text-decoration:none;color:inherit">
                <div class="thumb">
                  <% if (b.cover) { %>
                    <img src="<%= b.cover %>" alt="<%= b.title %>" loading="lazy" referrerpolicy="no-referrer">
                  <% } %>
                </div>
                <div class="meta">
                  <span class="badge"><%= brand %></span>
                  <h3><%= b.title %></h3>
                  <p><%= b.creator || '' %></p>
                </div>
              </a>
            </article>
          <% }) %>
        <% } %>
      </div>
    </div>
  </section>

  <!-- CURATED SHELVES (from /api/shelves) -->
  <section class="section section-tight">
    <div class="container" id="shelves">
      <!-- Filled by JS; fast cached API -->
    </div>
  </section>

  <!-- VALUE STRIP -->
  <section class="value-strip">
    <div class="value-inner container">
      <div class="value-item">
        <div class="vi-title">Find it fast</div>
        <div class="vi-copy">We search trusted open libraries and surface copies you can actually read.</div>
      </div>
      <div class="value-item">
        <div class="vi-title">Read like a book</div>
        <div class="vi-copy">Turn pages. Stay focused. A clean layout that feels like print.</div>
      </div>
      <div class="value-item">
        <div class="vi-title">Save your place</div>
        <div class="vi-copy">Sign in to favorite titles and pick up where you left off anywhere.</div>
      </div>
    </div>
  </section>

  <!-- CTA -->
  <section class="cta-band">
    <div class="container cta-inner">
      <div>
        <h2>Light up your reading.</h2>
        <p>Join free in seconds. No ads, just books.</p>
      </div>
      <div class="cta-actions">
        <% if (!user) { %>
          <a class="btn" href="/register">Create account</a>
          <a class="btn alt" href="/login">Sign in</a>
        <% } else { %>
          <a class="btn" href="/read">Start reading</a>
        <% } %>
      </div>
    </div>
  </section>

  <footer class="footer">
    &copy; <%= new Date().getFullYear() %> BookLantern • Built on open libraries • <a href="/about">About</a>
  </footer>

  <!-- HOMEPAGE POPULATION SCRIPT (Shelves + client fallback if SSR missing) -->
  <script>
    (function(){
      const IS_LOGGED_IN = <%= !!user %>;
      const shelvesRoot  = document.getElementById('shelves');
      const featuredGrid = document.getElementById('featured-grid');

      function escapeHtml(s){
        return String(s || '')
          .replace(/&/g,'&amp;').replace(/</g,'&lt;')
          .replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#39;');
      }

      function buildHref(b){
        const src = (b.source || '').toLowerCase();
        const id  = b.identifier || '';
        const ia  = b.archiveId || (src === 'archive' ? id : '');
        let dest  = '#';
        if (b && b.href) dest = b.href;
        else if (ia) dest = '/read/book/' + encodeURIComponent(ia);
        else if (src === 'gutenberg') {
          const gid = String(id).replace(/^gutenberg:/,'');
          const qs  = b.readerUrl ? ('?u=' + encodeURIComponent(b.readerUrl)) : '';
          dest = '/read/gutenberg/' + encodeURIComponent(gid) + '/reader' + qs;
        } else if (b.readerUrl) dest = b.readerUrl;
        return IS_LOGGED_IN ? dest : '/login?next=' + encodeURIComponent(dest);
      }

      function brand(src){
        const s = (src || '').toLowerCase();
        if (s === 'archive') return 'Archive.org';
        if (s === 'gutenberg') return 'Project Gutenberg';
        if (s === 'openlibrary') return 'Open Library';
        return 'Book';
      }

      function cardTemplate(b){
        return `
          <article class="card">
            <a href="${buildHref(b)}" style="text-decoration:none;color:inherit">
              <div class="thumb">
                ${b.cover ? `<img src="${b.cover}" alt="${escapeHtml(b.title || '')}" loading="lazy" referrerpolicy="no-referrer">` : ''}
              </div>
              <div class="meta">
                <span class="badge">${brand(b.source)}</span>
                <h3>${escapeHtml(b.title || '')}</h3>
                <p>${escapeHtml(b.creator || '')}</p>
              </div>
            </a>
          </article>
        `;
      }

      function shelfTemplate(shelf){
        const cards = (shelf.items || []).map(cardTemplate).join('');
        return `
          <div class="shelf">
            <div class="shelf-header">
              <h2>${escapeHtml(shelf.title)}</h2>
              <a class="hint" href="/read?query=${encodeURIComponent(shelf.q)}">See more</a>
            </div>
            <div class="shelf-row">
              ${cards}
            </div>
          </div>
        `;
      }

      async function loadShelves(){
        try {
          const r = await fetch('/api/shelves', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('Bad status');
          const data = await r.json();
          const shelves = Array.isArray(data.shelves) ? data.shelves : [];
          shelvesRoot.innerHTML = shelves.map(shelfTemplate).join('');
        } catch (e) {
          console.error('shelves error', e);
        }
      }

      // If server didn’t send featuredSSR for some reason, fill from API
      if (!featuredGrid.children.length) {
        (async () => {
          try {
            const r = await fetch('/api/featured-books', { credentials: 'same-origin' });
            if (!r.ok) throw new Error('Bad status');
            const data = await r.json();
            const items = Array.isArray(data.items) ? data.items : (Array.isArray(data.results) ? data.results : []);
            featuredGrid.innerHTML = items.map(cardTemplate).join('');
          } catch(e) {
            featuredGrid.innerHTML = '<div class="hint">Could not load featured books. Try refreshing.</div>';
          }
        })();
      }

      loadShelves();
    })();
  </script>
</body>
</html>
