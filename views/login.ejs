<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head', { title: 'Login • BookLantern' }) %>
</head>
<body class="theme-body">
  <%- include('partials/navbar') %>

  <main class="container mx-auto px-4 py-10">
    <section class="card shadow-sm rounded-2xl max-w-3xl mx-auto">
      <div class="p-6 md:p-8">
        <h1 class="text-3xl font-semibold mb-3">Sign in</h1>
        <p id="status" class="text-sm text-muted mb-4">
          If you clicked a magic link in your email, this page will complete your sign-in automatically.
        </p>

        <!-- Fallback UI (hidden unless needed) -->
        <div id="fallback" class="hidden space-y-4">
          <div class="rounded-xl border p-4">
            <p class="text-sm mb-2">If your email client removed the code, paste your link below:</p>
            <input id="paste-url" type="url" placeholder="Paste your magic link URL" class="w-full rounded-lg border px-3 py-2" autocomplete="off">
            <button id="paste-go" class="btn btn-primary mt-2">Complete sign-in</button>
          </div>

          <div class="rounded-xl border p-4">
            <p class="text-sm mb-2">Or resend a new link:</p>
            <div class="flex gap-2">
              <input id="resend-email" type="email" placeholder="your@email.com" class="flex-1 rounded-lg border px-3 py-2" autocomplete="email">
              <button id="resend-btn" class="btn">Send magic link</button>
            </div>
            <p id="resend-note" class="text-xs text-muted mt-2"></p>
          </div>
        </div>
      </div>
    </section>
  </main>

  <%- include('partials/footer') %>

  <!-- Config for client JS -->
  <script>
    window.APP = {
      SUPABASE_URL: "<%= process.env.PUBLIC_SUPABASE_URL %>",
      SUPABASE_ANON_KEY: "<%= process.env.PUBLIC_SUPABASE_ANON_KEY %>",
      POST_LOGIN_REDIRECT: "<%= typeof next !== 'undefined' ? next : '/dashboard' %>"
    };
  </script>

  <!-- Use UMD build to avoid /npm/+esm 404s -->
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.js"></script>

  <script>
    (function () {
      const $ = (s) => document.querySelector(s);
      const status = $('#status');
      const fallback = $('#fallback');

      function setStatus(msg) { if (status) status.textContent = msg; }

      function parseParams(urlLike) {
        try {
          const u = new URL(urlLike);
          const fromHash  = new URLSearchParams(u.hash?.startsWith('#') ? u.hash.slice(1) : '');
          const fromQuery = u.searchParams;

          const access_token  = fromHash.get('access_token')  || fromQuery.get('access_token');
          const refresh_token = fromHash.get('refresh_token') || fromQuery.get('refresh_token');
          const expires_in    = Number(fromHash.get('expires_in') || fromQuery.get('expires_in') || 3600);
          const token_type    = fromHash.get('token_type') || fromQuery.get('token_type') || 'bearer';

          if (!access_token || !refresh_token) return null;
          return { access_token, refresh_token, expires_in, token_type };
        } catch { return null; }
      }

      async function completeSessionFrom(urlLike) {
        if (!window.supabase || !window.APP) return false;
        const params = parseParams(urlLike);
        if (!params) return false;

        const client = window.supabase.createClient(window.APP.SUPABASE_URL, window.APP.SUPABASE_ANON_KEY);
        try {
          setStatus('Completing sign-in…');
          const { error } = await client.auth.setSession({
            access_token: params.access_token,
            refresh_token: params.refresh_token
          });
          if (error) throw error;

          // Clean sensitive bits from the URL
          history.replaceState(null, '', '/login');
          const to = window.APP.POST_LOGIN_REDIRECT || '/dashboard';
          location.assign(to);
          return true;
        } catch (e) {
          console.error('[login] setSession failed', e);
          setStatus('Could not complete sign-in. You can paste the link below or resend a new one.');
          if (fallback) fallback.classList.remove('hidden');
          return false;
        }
      }

      function canonicalizeIfFragment() {
        // If we arrived with #access_token, stick to /login but strip fragment after use.
        // Some clients show the fragment but block script until interaction; we still try.
        return !!(location.hash && location.hash.includes('access_token='));
      }

      async function init() {
        // 1) If fragment present, try immediately.
        if (canonicalizeIfFragment()) {
          const ok = await completeSessionFrom(location.href);
          if (ok) return;
        }
        // 2) Try query params (in case fragment got converted by client).
        const ok2 = await completeSessionFrom(location.href);
        if (ok2) return;

        // 3) Show fallback UI.
        setStatus('No tokens found. Please request a magic link, or use the fallback below.');
        if (fallback) fallback.classList.remove('hidden');

        // Fallback: paste box
        const pasteBtn = $('#paste-go');
        if (pasteBtn) {
          pasteBtn.addEventListener('click', async () => {
            const val = ($('#paste-url')?.value || '').trim();
            if (!val) return;
            await completeSessionFrom(val);
          });
        }

        // Fallback: resend magic link
        const resendBtn = $('#resend-btn');
        const note = $('#resend-note');
        if (resendBtn) {
          resendBtn.addEventListener('click', async () => {
            try {
              const email = ($('#resend-email')?.value || '').trim();
              if (!email) { note.textContent = 'Enter your email first.'; return; }
              const client = window.supabase.createClient(window.APP.SUPABASE_URL, window.APP.SUPABASE_ANON_KEY);
              const redirectTo = `${location.origin}/login`; // return to this page
              const { error } = await client.auth.signInWithOtp({ email, options: { emailRedirectTo: redirectTo } });
              if (error) throw error;
              note.textContent = 'Magic link sent. Check your inbox.';
            } catch (e) {
              console.error(e);
              note.textContent = 'Could not send link. Please try again.';
            }
          });
        }
      }

      document.addEventListener('DOMContentLoaded', init);
    })();
  </script>
</body>
</html>
