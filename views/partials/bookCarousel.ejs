<%
// Accessible horizontal book carousel with defensive programming
const carouselId = (typeof locals.id !== 'undefined') ? locals.id : ('carousel-' + Date.now());
const title = (typeof locals.title !== 'undefined') ? locals.title : 'Books';
const items = (typeof locals.items !== 'undefined' && Array.isArray(locals.items)) ? locals.items : [];

// Dedupe items by ID, URL, or title - defensive programming
const seen = new Set();
const uniqueItems = items.filter(item => {
  if (!item) return false;
  const key = item.id || item.url || item.readUrl || item.title || Math.random();
  if (seen.has(key)) return false;
  seen.add(key);
  return true;
});

// Only render if we have items
if (uniqueItems.length === 0) {
  return;
}
%>

<section class="carousel">
  <div class="container">
    <div class="carousel-header">
      <h2 class="section-title" id="<%= carouselId %>-title"><%= title %></h2>
      <div class="carousel-nav">
        <button 
          class="carousel-btn" 
          id="<%= carouselId %>-prev"
          aria-label="Previous books in <%= title %>"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button 
          class="carousel-btn" 
          id="<%= carouselId %>-next"
          aria-label="Next books in <%= title %>"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    </div>

    <div class="carousel-container" id="<%= carouselId %>">
      <div class="carousel-track" role="region" aria-labelledby="<%= carouselId %>-title">
        <% uniqueItems.forEach(function(item) { %>
          <div class="carousel-item">
            <%- include('./bookCard.ejs', { book: item }) %>
          </div>
        <% }) %>
      </div>
    </div>
  </div>
</section>

<script>
// Accessible carousel navigation for <%= carouselId %>
document.addEventListener('DOMContentLoaded', function() {
  const carousel = document.getElementById('<%= carouselId %>');
  const track = carousel?.querySelector('.carousel-track');
  const prevBtn = document.getElementById('<%= carouselId %>-prev');
  const nextBtn = document.getElementById('<%= carouselId %>-next');
  
  if (!track || !prevBtn || !nextBtn) return;

  const scrollAmount = 220; // Slightly more than card width
  
  function updateButtons() {
    const isAtStart = track.scrollLeft <= 0;
    const isAtEnd = track.scrollLeft >= track.scrollWidth - track.clientWidth - 1;
    
    prevBtn.disabled = isAtStart;
    nextBtn.disabled = isAtEnd;
    
    prevBtn.style.opacity = isAtStart ? '0.5' : '1';
    nextBtn.style.opacity = isAtEnd ? '0.5' : '1';
  }

  prevBtn.addEventListener('click', () => {
    track.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
  });

  nextBtn.addEventListener('click', () => {
    track.scrollBy({ left: scrollAmount, behavior: 'smooth' });
  });

  // Keyboard navigation
  track.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      e.preventDefault();
      track.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
    } else if (e.key === 'ArrowRight') {
      e.preventDefault();
      track.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  });

  track.addEventListener('scroll', updateButtons);
  updateButtons(); // Initial state
});
</script>