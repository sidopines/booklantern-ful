<script>
// Center short carousels
(function(){
  function markShortTracks(){
    document.querySelectorAll('.carousel-track').forEach(t=>{
      t.classList.remove('is-short');
      if (t.scrollWidth <= t.clientWidth + 1) t.classList.add('is-short');
    });
  }
  window.addEventListener('DOMContentLoaded', markShortTracks);
  window.addEventListener('resize', markShortTracks);
})();

// Listen (TTS) via delegation
(function(){
  const synth = ('speechSynthesis' in window) ? window.speechSynthesis : null;
  let utter=null, toast=null;

  function ensureToast(){
    if (toast) return toast;
    toast = document.createElement('div');
    toast.className='toast';
    toast.innerHTML = `
      <div class="text" style="max-width:360px"></div>
      <div class="actions">
        <button class="btn" data-act="play" type="button">Play</button>
        <button class="btn secondary" data-act="pause" type="button">Pause</button>
        <button class="btn secondary" data-act="stop" type="button">Stop</button>
      </div>`;
    document.body.appendChild(toast);
    toast.querySelector('[data-act="play"]').addEventListener('click',()=>{ if(!synth||!utter) return;
      if (synth.paused) synth.resume(); else if (!synth.speaking) synth.speak(utter); });
    toast.querySelector('[data-act="pause"]').addEventListener('click',()=>{ if(synth&&synth.speaking&&!synth.paused) synth.pause(); });
    toast.querySelector('[data-act="stop"]').addEventListener('click',()=>{ if(synth) synth.cancel(); toast.classList.remove('show'); });
    return toast;
  }
  function pickVoice(){ if(!synth) return null; const v=synth.getVoices(); return v.find(x=>/en[-_]US/i.test(x.lang))||v[0]||null; }

  document.addEventListener('click',(e)=>{
    const btn=e.target.closest('[data-bl-listen]'); if(!btn) return;
    const text=btn.getAttribute('data-bl-listen')||'Preview not available.';
    if(!synth){ alert(text); return; }
    synth.cancel(); utter=new SpeechSynthesisUtterance(text);
    const v=pickVoice(); if(v) utter.voice=v; utter.rate=1.0; utter.pitch=1.0;
    utter.onend=()=>toast&&toast.classList.remove('show'); utter.onerror=()=>toast&&toast.classList.remove('show');
    const t=ensureToast(); t.querySelector('.text').textContent=text; t.classList.add('show'); synth.speak(utter);
  });
  if(synth && 'onvoiceschanged' in synth){ synth.onvoiceschanged=()=>{}; }
})();
</script>