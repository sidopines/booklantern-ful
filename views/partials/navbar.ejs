<!-- views/partials/navbar.ejs -->
<%
// Prefer SSR truthiness to prevent flicker; client JS will re-check with Supabase.
const SSR_AUTH = (typeof isAuthenticated !== 'undefined' && isAuthenticated);
%>

<header class="topbar" role="navigation" aria-label="Primary">
  <!-- Left: brand -->
  <a class="brand row" href="/" aria-label="BookLantern Home">
    <img src="/public/img/brand.svg" alt="BookLantern" width="22" height="22"
         onerror="this.onerror=null;this.src='/public/favicon.svg';" />
    <span class="brand-name">BookLantern</span>
  </a>

  <!-- Center: primary links -->
  <ul class="nav-links row" aria-label="Site">
    <li><a href="/read">Read</a></li>
    <li><a href="/watch">Watch</a></li>
    <li><a href="/about">About</a></li>
    <li><a href="/contact">Contact</a></li>
  </ul>

  <!-- Right: search + toggle + auth -->
  <div class="actions row">
    <form class="nav-search row" action="/search" method="get" role="search" aria-label="Search">
      <input class="input" type="text" name="q" placeholder="Search free books…" aria-label="Search free books">
      <button class="btn" type="submit">Search</button>
    </form>

    <!-- Theme toggle (paired with /public/js/theme.js) -->
    <button id="themeToggle" class="btn icon-btn" type="button" aria-label="Toggle theme" aria-pressed="false" title="Toggle theme">
      <span aria-hidden="true">•</span>
    </button>

    <!-- Auth (SSR default; JS will reconcile with Supabase) -->
    <div id="auth-guest"
         class="row"
         style="gap:8px;<%= SSR_AUTH ? 'display:none;' : 'display:flex;' %>"
         aria-hidden="<%= SSR_AUTH ? 'true' : 'false' %>">
      <a class="btn" href="/login">Login</a>
      <a class="btn btn-primary equal" href="/register">Create account</a>
    </div>

    <div id="auth-user"
         class="row"
         style="gap:8px;<%= SSR_AUTH ? 'display:flex;' : 'display:none;' %>"
         aria-hidden="<%= SSR_AUTH ? 'false' : 'true' %>">
      <!-- Admin link will be injected here (left-most) if role=admin -->
      <a class="btn" href="/account">Account</a>
      <button id="navSignOut" class="btn" type="button">Sign out</button>
    </div>
  </div>
</header>

<script>
/* ---------- Auth state swap + Admin button (Supabase) ---------- */
(function () {
  var guest = document.getElementById('auth-guest');
  var user  = document.getElementById('auth-user');
  var sb    = window.supabaseClient;

  function showGuest(){
    if (guest){ guest.style.display = 'flex'; guest.setAttribute('aria-hidden', 'false'); }
    if (user){  user.style.display  = 'none'; user.setAttribute('aria-hidden', 'true'); }
  }
  function showUser(){
    if (user){  user.style.display  = 'flex'; user.setAttribute('aria-hidden', 'false'); }
    if (guest){ guest.style.display = 'none'; guest.setAttribute('aria-hidden', 'true'); }
  }

  function ensureAdminLink(){
    // Creates an Admin link (once) at the start of the auth-user actions
    if (!user) return;
    if (document.getElementById('navAdmin')) return;
    var adminLink = document.createElement('a');
    adminLink.id = 'navAdmin';
    adminLink.className = 'btn';
    adminLink.href = '/admin';
    adminLink.textContent = 'Admin';
    user.insertBefore(adminLink, user.firstChild);
  }

  async function refreshAuthUI() {
    try {
      if (!sb || !sb.auth || !sb.auth.getUser) { showGuest(); return; }
      var res = await sb.auth.getUser();
      var u   = res && res.data && res.data.user;
      if (u) {
        showUser();
        var role = (u.app_metadata && u.app_metadata.role) || '';
        if (role === 'admin') ensureAdminLink();
      } else {
        showGuest();
      }
    } catch (e) { showGuest(); }
  }

  // Initial reconcile after SSR
  refreshAuthUI();

  // Keep it in sync
  try {
    sb && sb.auth && sb.auth.onAuthStateChange && sb.auth.onAuthStateChange(function(){ refreshAuthUI(); });
  } catch (e) {}

  // Sign out button
  var signOutBtn = document.getElementById('navSignOut');
  if (signOutBtn) {
    signOutBtn.addEventListener('click', async function(){
      try { await (sb && sb.auth && sb.auth.signOut ? sb.auth.signOut() : Promise.resolve()); } catch (e) {}
      location.href = '/';
    });
  }
})();

/* ---------- Theme toggle fallback (idempotent with /public/js/theme.js) ---------- */
(function () {
  var btn = document.getElementById('themeToggle');
  if (!btn) return;
  var KEY = 'bl-theme';
  function getMode(){
    try{
      var m = localStorage.getItem(KEY) || 'auto';
      if (m === 'auto') {
        var prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        m = prefersDark ? 'dark' : 'light';
      }
      return m;
    }catch(e){ return 'light'; }
  }
  function setMode(m){
    try{ localStorage.setItem(KEY, m); }catch(e){}
    document.documentElement.setAttribute('data-theme', m);
    btn.setAttribute('aria-pressed', m === 'dark');
  }
  setMode(getMode());
  btn.addEventListener('click', function(){
    var current = getMode();
    setMode(current === 'dark' ? 'light' : 'dark');
  });
})();
</script>
