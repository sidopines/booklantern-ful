<!-- views/partials/navbar.ejs -->
<header class="topbar" role="navigation" aria-label="Primary">
  <!-- Left: brand -->
  <a class="brand row" href="/" aria-label="BookLantern home">
    <img src="/public/img/brand.svg" alt="" width="22" height="22"
         onerror="this.onerror=null;this.src='/public/favicon.svg';" />
    <span class="brand-name">BookLantern</span>
  </a>

  <!-- Center: primary links -->
  <ul class="nav-links row" aria-label="Site">
    <li><a href="/read">Read</a></li>
    <li><a href="/watch">Watch</a></li>
    <li><a href="/about">About</a></li>
    <li><a href="/contact">Contact</a></li>
  </ul>

  <!-- Right: search + toggle + auth -->
  <div class="actions row">
    <form class="nav-search row" action="/search" method="get" role="search">
      <input class="input" type="text" name="q" placeholder="Search free books…" aria-label="Search free books">
      <button class="btn" type="submit">Search</button>
    </form>

    <!-- Theme toggle (works with /public/js/theme.js; also has a tiny fallback below) -->
    <button id="themeToggle" class="btn icon-btn" type="button" aria-label="Toggle theme" aria-pressed="false" title="Toggle theme">
      <span aria-hidden="true">•</span>
    </button>

    <!-- Auth (guest vs user). Server can hint via res.locals.isAuthenticated; JS will finalize. -->
    <% const _isAuth = (typeof isAuthenticated !== 'undefined' && isAuthenticated) ? true : false; %>

    <!-- Guest actions -->
    <div id="guestActions" class="row" style="<%= _isAuth ? 'display:none' : '' %>">
      <a class="btn" href="/login">Login</a>
      <a class="btn btn-primary equal" href="/register">Create account</a>
    </div>

    <!-- User actions -->
    <div id="userActions" class="row" style="<%= _isAuth ? '' : 'display:none' %>">
      <a class="btn" href="/account">Account</a>
      <button id="signOutBtn" class="btn" type="button">Sign out</button>
    </div>
  </div>
</header>

<script>
/* -------- Theme toggle fallback (idempotent with /public/js/theme.js) -------- */
(function () {
  var btn = document.getElementById('themeToggle');
  if (!btn) return;
  var KEY = 'bl-theme';
  function getMode(){
    try{
      var m = localStorage.getItem(KEY) || 'auto';
      if (m === 'auto') {
        var prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        m = prefersDark ? 'dark' : 'light';
      }
      return m;
    }catch(e){ return 'light'; }
  }
  function setMode(m){
    try{ localStorage.setItem(KEY, m); }catch(e){}
    document.documentElement.setAttribute('data-theme', m);
    btn.setAttribute('aria-pressed', m === 'dark');
  }
  setMode(getMode());
  btn.addEventListener('click', function(){
    var current = getMode();
    setMode(current === 'dark' ? 'light' : 'dark');
  });
})();

/* -------- Auth UI swap (Supabase) --------
   Swaps Login/Create with Account/Sign out if a session exists.
   Works even without server sessions. */
(function () {
  var sb = window.supabaseClient;
  var g = document.getElementById('guestActions');
  var u = document.getElementById('userActions');
  function showGuest(){ if(g) g.style.display=''; if(u) u.style.display='none'; }
  function showUser(){ if(g) g.style.display='none'; if(u) u.style.display=''; }

  // no client -> leave whatever server rendered
  if (!sb || !sb.auth) return;

  // initial state
  sb.auth.getUser().then(function(res){
    if (res && res.data && res.data.user) showUser(); else showGuest();
  }).catch(showGuest);

  // react to changes
  try {
    sb.auth.onAuthStateChange(function(event, session){
      if (session && session.user) showUser(); else showGuest();
    });
  } catch(_) {}

  // sign out button
  var signOut = document.getElementById('signOutBtn');
  if (signOut) {
    signOut.addEventListener('click', function(){
      signOut.disabled = true;
      Promise.resolve()
        .then(function(){ return sb.auth.signOut(); })
        .catch(function(){ /* ignore */ })
        .finally(function(){ window.location.href = '/'; });
    });
  }
})();
</script>
