<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: typeof pageTitle !== 'undefined' ? pageTitle : 'Read Books Online',
    pageDescription: typeof pageDescription !== 'undefined' ? pageDescription : "Browse and read books fetched from multiple free sources using BookLantern's modern reader experience."
  }) %>
</head>
<body>
  <%- include('./partials/navbar.ejs') %>

  <style>
    .wrap { max-width: 1100px; margin: 24px auto 40px; padding: 0 16px; }
    .back-link { display:inline-block; margin: 8px 0 6px; color:#1256b3; text-decoration:none; }
    .back-link:hover { text-decoration:underline; }
    h1 { margin: 8px 0 14px; }
    form.search { display:flex; gap:8px; flex-wrap:wrap; margin: 12px 0 18px; }
    form.search input[type="text"]{
      flex:1 1 320px; min-width:240px;
      padding:.7rem .8rem; border:1px solid #e5e7eb; border-radius:10px; background:#fff;
    }
    form.search button{
      padding:.7rem 1rem; border-radius:10px; border:1px solid #e5e7eb; background:#111; color:#fff; font-weight:600; cursor:pointer;
    }
    .empty{ color:#667085; margin: 8px 0 16px; }

    .book-grid{
      display:grid; gap:18px;
      grid-template-columns: repeat(auto-fill, minmax(210px, 1fr));
    }
    .book-card{
      background:#fff; border:1px solid #eaeef3; border-radius:16px; overflow:hidden;
      box-shadow: 0 10px 30px rgba(2,6,23,.06), 0 2px 10px rgba(2,6,23,.05);
      transition: transform .18s ease, box-shadow .18s ease;
    }
    .book-card:hover{ transform: translateY(-3px); box-shadow: 0 30px 60px rgba(2,6,23,.10), 0 12px 24px rgba(2,6,23,.06); }
    .thumb{ position:relative; width:100%; aspect-ratio:3/4; background:#eef2f7; }
    .thumb img{ position:absolute; inset:0; width:100%; height:100%; object-fit:cover; }
    .thumb .no-cover{ position:absolute; inset:0; display:grid; place-items:center; color:#667085; font-size:.9rem; }
    .card-body{ padding:12px 14px 14px; }
    .card-body h3{ margin:8px 0 4px; font-size:16px; line-height:1.25; }
    .card-body p{ margin:0; font-size:13px; color:#667085; }
    .meta-row{ display:flex; align-items:center; gap:6px; margin-top:6px; }
    .badge{ display:inline-block; padding:4px 8px; font-size:11px; border:1px solid #eaeef3; border-radius:999px; background:#fff; color:#1f2937; }

    .actions{ display:flex; gap:8px; margin-top:.6rem; }
    .btn-link{
      display:inline-flex; align-items:center; gap:6px; padding:.45rem .65rem; border-radius:10px;
      background:#111; color:#fff; text-decoration:none; font-size:.9rem; font-weight:600;
      border:1px solid #e5e7eb;
    }
    .btn-link.alt{ background:#fff; color:#111; }
    .chip{
      display:inline-flex; align-items:center; gap:6px; padding:.35rem .6rem; border-radius:999px;
      border:1px solid #e5e7eb; background:#fff; font-size:.85rem; cursor:pointer; user-select:none;
    }
    .chip[aria-pressed="true"]{ background:#111; color:#fff; border-color:#111; }

    /* shelf block reused on this page */
    .section{ padding: 24px 0; }
    .shelf-header{
      display:flex; align-items:baseline; justify-content:space-between; gap:12px; margin:6px 0 12px;
    }
    .shelf-header h2{ margin:0; font-size:22px; letter-spacing:-.01em; }
    .hint{ color:#667085; font-size:14px; text-decoration:none; }
  </style>

  <div class="wrap">
    <a href="javascript:history.back()" class="back-link">‚Üê Back</a>
    <h1>üìö Explore Free Books</h1>

    <form class="search" action="/read" method="GET">
      <input
        type="text"
        name="query"
        placeholder="Search books by title or author"
        value="<%= typeof query !== 'undefined' ? query : '' %>">
      <button type="submit">Search</button>
    </form>

    <% const hasQuery = (typeof query !== 'undefined' && String(query).trim() !== ''); %>

    <!-- STAFF PICKS (only if no query) -->
    <% if (!hasQuery) { %>
      <section class="section">
        <div class="shelf-header">
          <h2>Staff picks</h2>
          <div class="hint">Curated picks from globally trusted libraries</div>
        </div>
        <div id="featured-grid" class="book-grid" aria-live="polite"></div>
      </section>
    <% } %>

    <% 
      // Safe helpers (avoid .replace on non-strings)
      function toStr(v){
        if (v === null || typeof v === 'undefined') return '';
        if (Array.isArray(v)) return v.filter(Boolean).join(', ');
        return String(v);
      }
      function brandFrom(src){
        const s = String(src||'').toLowerCase();
        if (s === 'archive') return 'Archive.org';
        if (s === 'gutenberg') return 'Project Gutenberg';
        if (s === 'openlibrary') return 'Open Library';
        if (s === 'wikisource') return 'Wikisource';
        return 'Book';
      }
    %>

    <% if (!books || books.length === 0) { %>
      <div class="empty">No books found. Try another search term.</div>
    <% } else { %>
      <div class="book-grid">
        <% books.forEach(function(book){ 
             const srcRaw  = book.source || '';
             const src     = String(srcRaw).toLowerCase();
             const id      = book.identifier || book._id || '';
             const isArchive   = (src === 'archive') || (/^archive:/i.test(String(id)));
             const isGutenberg = (src === 'gutenberg') || (/^gutenberg:/i.test(String(id)));
             const gutenId     = isGutenberg ? String(id).replace(/^gutenberg:/,'') : '';
             
             // Safe strings for title/author and attributes
             const titleStr  = toStr(book.title);
             const authorStr = toStr(book.creator || book.author);
             const coverStr  = toStr(book.cover);

             // Destination is precomputed by routes as an internal URL.
             let dest = toStr(book.readerUrl || '#');

             // Gate guests
             if (!user && dest && dest !== '#') {
               dest = '/login?next=' + encodeURIComponent(dest);
             }
        %>
          <div class="book-card" data-source="<%= src %>">
            <a href="<%= dest %>" style="text-decoration:none;color:inherit">
              <div class="thumb">
                <% if (coverStr) { %>
                  <img src="<%= coverStr %>" alt="<%- titleStr.replace(/"/g,'&quot;') %>" loading="lazy" referrerpolicy="no-referrer">
                <% } else { %>
                  <div class="no-cover">No Cover</div>
                <% } %>
              </div>
              <div class="card-body">
                <h3><%= titleStr %></h3>
                <p><%= authorStr %></p>
                <div class="meta-row">
                  <span class="badge"><%= brandFrom(srcRaw) %></span>
                </div>
                <div class="actions">
                  <span class="btn-link">üìñ Read now</span>
                  <% if (user && isGutenberg && gutenId) { %>
                    <button 
                      type="button" 
                      class="chip listen-chip"
                      data-gid="<%= gutenId %>"
                      data-title="<%- titleStr.replace(/"/g,'&quot;') %>"
                      data-author="<%- authorStr.replace(/"/g,'&quot;') %>"
                      aria-pressed="false"
                      title="Preview by listening">
                      üîä Listen
                    </button>
                  <% } %>
                </div>
              </div>
            </a>
          </div>
        <% }) %>
      </div>
    <% } %>
  </div>

  <footer class="footer">
    &copy; <%= new Date().getFullYear() %> BookLantern ‚Ä¢ Built for readers ‚Ä¢ <a href="/about">About</a>
  </footer>

  <% if (!hasQuery) { %>
  <!-- STAFF PICKS fetch -->
  <script>
    (function(){
      const grid = document.getElementById('featured-grid');
      if (!grid) return;

      function escapeHtml(s){
        return String(s || '')
          .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
          .replace(/"/g,'&quot;').replace(/'/g,'&#39;');
      }
      function brand(src){
        const s = String(src||'').toLowerCase();
        return s==='archive' ? 'Archive.org' : (s==='gutenberg' ? 'Project Gutenberg' : (s==='openlibrary' ? 'Open Library' : (s==='wikisource' ? 'Wikisource' : 'Book')));
      }
      function hrefFromCard(b){
        if (b && b.readerUrl) return b.readerUrl; // routes send internal URLs now
        return '#';
      }
      function cardTemplate(b){
        const title  = escapeHtml(b.title || '');
        const author = escapeHtml(b.creator || b.author || '');
        const cover  = b.cover ? `<img src="${b.cover}" alt="${title}" loading="lazy" referrerpolicy="no-referrer">` : '<div class="no-cover">No Cover</div>';
        const dest   = hrefFromCard(b);
        return `
          <div class="book-card">
            <a href="${dest}" style="text-decoration:none;color:inherit">
              <div class="thumb">${cover}</div>
              <div class="card-body">
                <h3>${title}</h3>
                <p>${author}</p>
                <div class="meta-row"><span class="badge">${brand(b.source)}</span></div>
                <div class="actions"><span class="btn-link">üìñ Read now</span></div>
              </div>
            </a>
          </div>
        `;
      }

      async function loadFeatured(){
        try{
          const r = await fetch('/api/featured-books', { credentials: 'same-origin' });
          if (!r.ok) throw new Error('bad status');
          const data = await r.json();
          const items =
            Array.isArray(data) ? data :
            (Array.isArray(data.items) ? data.items :
            (Array.isArray(data.results) ? data.results : []));
          if (!items.length) {
            grid.innerHTML = '<div class="empty">No picks right now. Try a search above.</div>';
            return;
          }
          grid.innerHTML = items.map(cardTemplate).join('');
        } catch(e){
          console.error('featured error', e);
          grid.innerHTML = '<div class="empty">Could not load picks. Try refreshing.</div>';
        }
      }
      loadFeatured();
    })();
  </script>
  <% } %>

  <!-- Listen preview (client-side TTS) -->
  <script>
    (function(){
      const chips = Array.from(document.querySelectorAll('.listen-chip'));
      if (!chips.length) return;

      // small helper
      function htmlToText(html){
        const d = document.createElement('div');
        d.innerHTML = html;
        // remove scripts/styles
        d.querySelectorAll('script,style,noscript').forEach(n => n.remove());
        return (d.textContent || d.innerText || '').replace(/\s+/g,' ').trim();
      }

      async function fetchSnippet(gid){
        // Uses our server endpoint; requires session (user is logged in to see chip)
        const r = await fetch(`/read/gutenberg/${gid}/text`, { credentials:'same-origin' });
        if (!r.ok) throw new Error('text fetch failed');
        const data = await r.json();
        if (data.type === 'html') return htmlToText(data.content).slice(0, 1200);
        return String(data.content || '').slice(0, 1200);
      }

      function speak(text){
        // Stop any current speech
        try { window.speechSynthesis.cancel(); } catch(e){}
        const u = new SpeechSynthesisUtterance(text);
        u.rate = 1.0; u.pitch = 1.0;
        // pick a default voice; browsers differ
        const voices = window.speechSynthesis.getVoices();
        if (voices && voices.length) u.voice = voices.find(v => /en/i.test(v.lang)) || voices[0];
        window.speechSynthesis.speak(u);
        return u;
      }

      chips.forEach(chip => {
        let speaking = false;
        let currentUtterance = null;
        chip.addEventListener('click', async (e) => {
          e.preventDefault();
          if (speaking) {
            // toggle off
            try { window.speechSynthesis.cancel(); } catch(_){}
            chip.setAttribute('aria-pressed', 'false');
            chip.textContent = 'üîä Listen';
            speaking = false;
            return;
          }
          const gid = chip.getAttribute('data-gid');
          if (!gid) return;
          chip.setAttribute('aria-pressed', 'true');
          chip.textContent = '‚è∏ Stop';
          try{
            const text = await fetchSnippet(gid);
            currentUtterance = speak(text);
            currentUtterance.onend = () => {
              chip.setAttribute('aria-pressed', 'false');
              chip.textContent = 'üîä Listen';
              speaking = false;
            };
            speaking = true;
          }catch(err){
            console.error('listen preview error', err);
            chip.setAttribute('aria-pressed', 'false');
            chip.textContent = 'üîä Listen';
            speaking = false;
            alert('Audio preview unavailable right now.');
          }
        });
      });
    })();
  </script>
</body>
</html>
