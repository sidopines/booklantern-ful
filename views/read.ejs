<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: (typeof pageTitle !== 'undefined' && pageTitle) ? pageTitle : 'Explore Free Books',
    pageDescription: (typeof pageDescription !== 'undefined' && pageDescription) ? pageDescription : 'Search and read books in a clean, unified reader.'
  }) %>
</head>
<body class="read-page" data-page="read">
  <%- include('./partials/nav.ejs') %>

  <!-- Clean Search Header -->
  <div class="search-header">
    <div class="container">
      <div class="search-header-content">
        <h1 class="page-title">
          <% if (typeof query !== 'undefined' && query) { %>
            Search Results
          <% } else { %>
            Explore Free Books
          <% } %>
        </h1>
        
        <!-- Search Form -->
        <form class="search-form" action="/read" method="GET" role="search">
          <div class="search-wrapper">
            <svg class="search-icon" width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
            <input 
              type="text" 
              name="query" 
              class="search-input" 
              placeholder="Search by title, author, topic..." 
              value="<%= (typeof query !== 'undefined' && query) ? query : '' %>" 
              aria-label="Search books"
            >
            <button type="submit" class="search-button">Search</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <div class="container">

    <% const hasQuery = (typeof query !== 'undefined' && String(query).trim() !== ''); %>

      <% if (hasQuery) { %>
        <!-- Results header -->
        <div class="results-header reveal">
          <div class="results-info">
            <span class="results-count">Results for</span>
            <span class="results-query">"<%= query %>"</span>
            <span class="results-count">(<%= books ? books.length : 0 %> found)</span>
          </div>
        </div>
      <% } %>

      <% function textOf(x){ if (!x) return ''; if (Array.isArray(x)) return x.join(', '); if (typeof x === 'object') return (x.name||x.title||x.text||''); return String(x); } %>

      <% if (!books || books.length === 0) { %>
        <% if (hasQuery) { %>
          <div class="empty-state glass-card reveal">
            <div class="empty-icon" id="magnifier-animation"></div>
            <h3>No exact matches found</h3>
            <p>Try fewer words or different spelling. You can also browse without searching.</p>
            <a href="/read" class="btn btn-primary">Browse All Books</a>
          </div>
        <% } else { %>
          <div class="empty-state glass-card reveal">
            <div class="empty-icon" id="books-animation"></div>
            <h3>Start exploring</h3>
            <p>Search for books by title, author, or topic to get started.</p>
          </div>
        <% } %>
      <% } else { %>
        <div class="results-grid">
        <% books.forEach(function(book){ 
             const src   = String(book.source || '').toLowerCase();
             const id    = book.identifier || book._id || '';
             const title = textOf(book.title) || 'Untitled';
             const creator = textOf(book.creator || book.author || '');
             const cover = book.cover || '';
             const gid   = book.gutenId || book.gid || (String(id).startsWith('gutenberg:') ? String(id).split(':')[1] : null);
             const wsLang  = book.wsLang || '';
             const wsTitle = book.wsTitle || '';

             // Decide destination based on new card structure
             let dest = '#';
             let isDisabled = false;
             
             if (book.href && book.openInline === true) {
               // New structure: use href for on-site reading
               dest = book.href;
             } else if (book.readerUrl) {
               // Legacy structure: use readerUrl
               dest = book.readerUrl;
             } else if (src === 'gutenberg' && gid) {
               // Force EPUB mode so the reader opens ePub.js
               const qs = '?mode=epub'
                 + (title ? ('&title=' + encodeURIComponent(title)) : '')
                 + (creator ? ('&author=' + encodeURIComponent(creator)) : '');
               dest = `/read/gutenberg/${encodeURIComponent(gid)}/reader${qs}`;
             } else if (src === 'wikisource' && wsLang && wsTitle) {
               dest = `/read/wikisource/${encodeURIComponent(wsLang)}/${encodeURIComponent(wsTitle)}/reader`;
             } else if (book.pdfUrl) {
               // Our PDF viewer page (see pdf-viewer.ejs)
               const qs = '?src=' + encodeURIComponent(book.pdfUrl) 
                 + (title ? ('&title=' + encodeURIComponent(title)) : '');
               dest = '/read/pdf' + qs;
             }

             // Gate visitors to login before reading (unless disabled)
             let finalHref = isDisabled ? '#' : (dest || '#');
             
             // Use the card partial with book data
             const bookData = {
               title: title,
               author: creator,
               cover: cover || '/img/cover-fallback.svg',
               readUrl: user ? finalHref : ('/login?next=' + encodeURIComponent(finalHref)),
               source: src
             };
             %>
          <%- include('./partials/card.ejs', { book: bookData }) %>
        <% }) %>
      </div>
    <% } %>

      <div class="search-tip reveal">
        <p>💡 Tip: "Listen" previews read the first page of a Project Gutenberg book without leaving this page.</p>
      </div>
    </div>
  </div>

  <!-- Read Page Styles -->
  <style>
    /* Search Header */
    .search-header {
      background: var(--bg);
      border-bottom: 1px solid var(--line);
      padding: var(--space-2xl) 0;
    }

    .search-header-content {
      text-align: center;
      max-width: 800px;
      margin: 0 auto;
    }

    .page-title {
      font-size: 2rem;
      font-weight: var(--font-weight-bold);
      margin-bottom: var(--space-xl);
      color: var(--text);
    }

    .search-wrapper {
      position: relative;
      max-width: 600px;
      margin: 0 auto;
    }

    .search-icon {
      position: absolute;
      left: var(--space-lg);
      top: 50%;
      transform: translateY(-50%);
      color: var(--muted);
    }

    .search-input {
      width: 100%;
      height: 56px;
      padding: 0 var(--space-xl) 0 52px;
      border: 2px solid var(--line);
      border-radius: var(--r-lg);
      background: white;
      font-size: 1rem;
      color: var(--text);
      transition: all var(--transition-fast);
    }

    .search-input:focus {
      outline: none;
      border-color: var(--brand);
      box-shadow: 0 0 0 3px rgba(26, 115, 232, 0.1);
    }

    .search-input::placeholder {
      color: var(--muted);
    }

    .search-button {
      position: absolute;
      right: var(--space-sm);
      top: 50%;
      transform: translateY(-50%);
      background: var(--brand);
      border: none;
      border-radius: var(--r-md);
      color: white;
      padding: var(--space-md) var(--space-lg);
      font-weight: var(--font-weight-medium);
      cursor: pointer;
      transition: all var(--transition-fast);
    }

    .search-button:hover {
      background: var(--brand-ink);
    }

    /* Main Content */
    .main-content {
      padding: var(--space-2xl) 0;
    }

    /* Results Header */
    .results-header {
      margin-bottom: var(--space-xl);
    }

    .results-info {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      flex-wrap: wrap;
    }

    .results-count {
      color: var(--muted);
      font-size: 1rem;
    }

    .results-query {
      font-weight: var(--font-weight-semibold);
      color: var(--brand);
      font-size: 1rem;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: var(--space-4xl) var(--space-xl);
      max-width: 500px;
      margin: 0 auto;
      background: var(--card);
      border-radius: var(--r-lg);
    }

    .empty-state h3 {
      font-size: 1.5rem;
      font-weight: var(--font-weight-semibold);
      margin-bottom: var(--space-md);
      color: var(--text);
    }

    .empty-state p {
      color: var(--muted);
      margin-bottom: var(--space-xl);
      line-height: 1.6;
    }

    /* Search Tip */
    .search-tip {
      text-align: center;
      margin-top: var(--space-2xl);
      padding: var(--space-lg);
      background: var(--card);
      border: 1px solid var(--line);
      border-radius: var(--r-md);
    }

    .search-tip p {
      margin: 0;
      color: var(--muted);
      font-size: 0.875rem;
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      .search-input {
        padding-right: var(--space-xl);
      }

      .search-button {
        position: static;
        transform: none;
        width: 100%;
        margin-top: var(--space-sm);
        border-radius: var(--r-md);
      }

      .search-wrapper {
        display: flex;
        flex-direction: column;
      }

      .results-info {
        flex-direction: column;
        align-items: flex-start;
        gap: var(--space-xs);
      }
    }
  </style>

  <script src="/js/ui.js?v=<%= buildId %>"></script>
  
  <script>
    // Tiny "Listen preview" for Gutenberg cards
    (function(){
      const buttons = document.querySelectorAll('.preview-tts');
      if (!('speechSynthesis' in window)) return;

      function speak(text){
        window.speechSynthesis.cancel();
        const u = new SpeechSynthesisUtterance(text);
        u.rate = 1.0; u.volume = 1.0;
        window.speechSynthesis.speak(u);
      }
      async function firstChunk(gid){
        try{
          const r = await fetch('/read/gutenberg/' + encodeURIComponent(gid) + '/text', { credentials:'same-origin' });
          if (!r.ok) return '';
          const data = await r.json();
          let raw = (data && data.content) ? data.content : '';
          if (data && data.type === 'html') {
            const div = document.createElement('div');
            div.innerHTML = raw;
            raw = div.textContent || div.innerText || '';
          }
          // take a sensible bite
          return String(raw).trim().slice(0, 1200);
        }catch(e){
          return '';
        }
      }
      buttons.forEach(btn => {
        btn.addEventListener('click', async (ev)=>{
          ev.preventDefault(); ev.stopPropagation();
          const gid = btn.getAttribute('data-gid');
          btn.disabled = true; btn.textContent = '⏳';
          const chunk = await firstChunk(gid);
          btn.disabled = false; btn.textContent = '🔊 Listen';
          if (!chunk) { alert('Could not fetch a preview.'); return; }
          speak(chunk);
        });
      });
    })();
  </script>
</body>
</html>
