<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: (typeof pageTitle !== 'undefined' && pageTitle) ? pageTitle : 'Explore Free Books',
    pageDescription: (typeof pageDescription !== 'undefined' && pageDescription) ? pageDescription : 'Search and read books in a clean, unified reader.',
    loadGSAP: true,
    loadLottie: true
  }) %>
</head>
<body class="read-page" data-page="read">
  <%- include('./partials/nav.ejs') %>

  <!-- Cinematic Page Header -->
  <div class="page-header cinematic-bg spotlight-mask">
    <div class="container">
      <a class="back-link" href="javascript:history.back()">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m15 18-6-6 6-6"/>
        </svg>
        Back
      </a>
      <h1 class="page-title">📚 Explore Free Books</h1>
    </div>
    <!-- Spotlight cones -->
    <div class="spotlight-cones">
      <div class="spotlight-cone spotlight-cone-1"></div>
      <div class="spotlight-cone spotlight-cone-2"></div>
      <div class="spotlight-cone spotlight-cone-3"></div>
    </div>
  </div>

  <!-- Glowing Search Pill -->
  <div class="search-container glass">
    <div class="container">
      <form class="search-form" action="/read" method="GET" role="search">
        <div class="search-pill-glow">
          <input type="text" name="query" placeholder="Search title or author..." value="<%= (typeof query !== 'undefined' && query) ? query : '' %>" aria-label="Search books" class="search-input-glow">
          <button type="submit" class="search-button-glow">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
            Search
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <div class="container">

    <% const hasQuery = (typeof query !== 'undefined' && String(query).trim() !== ''); %>

      <% if (hasQuery) { %>
        <!-- Results header -->
        <div class="results-header reveal">
          <div class="results-info">
            <span class="results-count">Results for</span>
            <span class="results-query">"<%= query %>"</span>
            <span class="results-count">(<%= books ? books.length : 0 %> found)</span>
          </div>
        </div>
      <% } %>

      <% function textOf(x){ if (!x) return ''; if (Array.isArray(x)) return x.join(', '); if (typeof x === 'object') return (x.name||x.title||x.text||''); return String(x); } %>

      <% if (!books || books.length === 0) { %>
        <% if (hasQuery) { %>
          <div class="empty-state glass-card reveal">
            <div class="empty-icon" id="magnifier-animation"></div>
            <h3>No exact matches found</h3>
            <p>Try fewer words or different spelling. You can also browse without searching.</p>
            <a href="/read" class="btn btn-primary">Browse All Books</a>
          </div>
        <% } else { %>
          <div class="empty-state glass-card reveal">
            <div class="empty-icon" id="books-animation"></div>
            <h3>Start exploring</h3>
            <p>Search for books by title, author, or topic to get started.</p>
          </div>
        <% } %>
      <% } else { %>
        <div class="books-grid">
        <% books.forEach(function(book){ 
             const src   = String(book.source || '').toLowerCase();
             const id    = book.identifier || book._id || '';
             const title = textOf(book.title) || 'Untitled';
             const creator = textOf(book.creator || book.author || '');
             const cover = book.cover || '';
             const gid   = book.gutenId || book.gid || (String(id).startsWith('gutenberg:') ? String(id).split(':')[1] : null);
             const wsLang  = book.wsLang || '';
             const wsTitle = book.wsTitle || '';

             // Decide destination based on new card structure
             let dest = '#';
             let isDisabled = false;
             
             if (book.href && book.openInline === true) {
               // New structure: use href for on-site reading
               dest = book.href;
             } else if (book.readerUrl) {
               // Legacy structure: use readerUrl
               dest = book.readerUrl;
             } else if (src === 'gutenberg' && gid) {
               // Force EPUB mode so the reader opens ePub.js
               const qs = '?mode=epub'
                 + (title ? ('&title=' + encodeURIComponent(title)) : '')
                 + (creator ? ('&author=' + encodeURIComponent(creator)) : '');
               dest = `/read/gutenberg/${encodeURIComponent(gid)}/reader${qs}`;
             } else if (src === 'wikisource' && wsLang && wsTitle) {
               dest = `/read/wikisource/${encodeURIComponent(wsLang)}/${encodeURIComponent(wsTitle)}/reader`;
             } else if (book.pdfUrl) {
               // Our PDF viewer page (see pdf-viewer.ejs)
               const qs = '?src=' + encodeURIComponent(book.pdfUrl) 
                 + (title ? ('&title=' + encodeURIComponent(title)) : '');
               dest = '/read/pdf' + qs;
             }

             // Gate visitors to login before reading (unless disabled)
             let finalHref = isDisabled ? '#' : (dest || '#');
             
             // Get badge class and source name
             let badgeClass = '';
             let sourceName = '';
             if (src === 'gutenberg') { badgeClass = 'gutenberg'; sourceName = 'Gutenberg'; }
             else if (src === 'archive') { badgeClass = 'archive'; sourceName = 'Archive.org'; }
             else if (src === 'openlibrary') { badgeClass = 'openlibrary'; sourceName = 'Open Library'; }
             else if (src === 'loc') { badgeClass = 'loc'; sourceName = 'LOC'; }
             else if (src === 'wikisource') { badgeClass = 'wikisource'; sourceName = 'Wikisource'; }
             %>
          <div class="book-card glass-card reveal-card card-parallax hover-lift" data-source="<%= src %>">
            <% if (isDisabled) { %>
              <div class="book-content">
                <div class="book-cover">
                  <% if (cover) { %>
                    <img src="<%= cover %>" alt="<%= title %>" loading="lazy" referrerpolicy="no-referrer">
                  <% } else { %>
                    <div class="cover-placeholder">
                      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                        <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                        <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
                      </svg>
                    </div>
                  <% } %>
                </div>
                <div class="book-info">
                  <% if (src) { %>
                    <div class="source-badge pill pill-muted"><%= sourceName %></div>
                  <% } %>
                  <h3 class="book-title"><%= title %></h3>
                  <% if (creator) { %><p class="book-author"><%= creator %></p><% } %>
                  <div class="book-actions">
                    <span class="btn btn-disabled">📖 Read</span>
                  </div>
                </div>
              </div>
            <% } else { %>
              <a href="<%= (user ? finalHref : ('/login?next=' + encodeURIComponent(finalHref))) %>" class="book-content">
                <div class="book-cover">
                  <% if (cover) { %>
                    <img src="<%= cover %>" alt="<%= title %>" loading="lazy" referrerpolicy="no-referrer">
                  <% } else { %>
                    <div class="cover-placeholder">
                      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                        <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                        <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
                      </svg>
                    </div>
                  <% } %>
                </div>
                <div class="book-info">
                  <% if (src) { %>
                    <div class="source-badge pill pill-primary"><%= sourceName %></div>
                  <% } %>
                  <h3 class="book-title"><%= title %></h3>
                  <% if (creator) { %><p class="book-author"><%= creator %></p><% } %>
                  <div class="book-actions">
                    <span class="btn btn-primary book-flip-btn">
                      <span class="btn-text">📖 Read</span>
                      <div class="book-flip-animation" id="book-flip-<%= gid || Math.random().toString(36).substr(2, 9) %>"></div>
                    </span>
                    <% if (src === 'gutenberg' && gid) { %>
                      <button type="button" class="btn btn-ghost preview-tts" data-gid="<%= gid %>" data-title="<%- title %>" aria-pressed="false" title="Preview first page by listening">🔊 Listen</button>
                    <% } %>
                  </div>
                </div>
              </a>
            <% } %>
          </div>
        <% }) %>
      </div>
    <% } %>

      <div class="search-tip reveal">
        <p>💡 Tip: "Listen" previews read the first page of a Project Gutenberg book without leaving this page.</p>
      </div>
    </div>
  </div>

  <!-- Read Page Styles -->
  <style>
    /* Page Layout */
    .read-page {
      background: var(--gradient-bg);
      min-height: 100vh;
    }

    .page-header {
      padding: var(--space-xl) 0;
      border-bottom: 1px solid var(--glass-border);
      position: relative;
      overflow: hidden;
    }

    /* Spotlight Cones */
    .spotlight-cones {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
    }

    .spotlight-cone {
      position: absolute;
      width: 200px;
      height: 200px;
      background: radial-gradient(circle, rgba(108, 124, 255, 0.1) 0%, transparent 70%);
      border-radius: 50%;
      animation: spotlight-move 8s ease-in-out infinite;
    }

    .spotlight-cone-1 {
      top: 20%;
      left: 10%;
      animation-delay: 0s;
    }

    .spotlight-cone-2 {
      top: 60%;
      right: 15%;
      animation-delay: 2.5s;
    }

    .spotlight-cone-3 {
      bottom: 20%;
      left: 50%;
      animation-delay: 5s;
    }

    @keyframes spotlight-move {
      0%, 100% { opacity: 0.3; transform: scale(1); }
      50% { opacity: 0.6; transform: scale(1.2); }
    }

    .back-link {
      display: inline-flex;
      align-items: center;
      gap: var(--space-sm);
      color: var(--muted);
      text-decoration: none;
      font-weight: var(--font-weight-medium);
      transition: color var(--transition-normal);
      margin-bottom: var(--space-lg);
    }

    .back-link:hover {
      color: var(--primary);
    }

    .page-title {
      font-size: clamp(2rem, 4vw, 3rem);
      font-weight: var(--font-weight-bold);
      margin: 0;
      background: var(--gradient-primary);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    /* Search Container */
    .search-container {
      position: sticky;
      top: 0;
      z-index: var(--z-sticky);
      padding: var(--space-lg) 0;
      border-bottom: 1px solid var(--glass-border);
      margin-bottom: var(--space-2xl);
    }

    /* Glowing Search Pill */
    .search-pill-glow {
      display: flex;
      gap: var(--space-md);
      align-items: center;
      background: var(--glass-bg);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border: 2px solid var(--glass-border);
      border-radius: var(--radius-pill);
      padding: var(--space-md);
      box-shadow: var(--glass-shadow);
      max-width: 600px;
      margin: 0 auto;
      transition: all var(--transition-normal);
    }

    .search-pill-glow:focus-within {
      border-color: var(--primary);
      box-shadow: var(--shadow-neon);
      transform: scale(1.02);
    }

    .search-input-glow {
      flex: 1;
      border: none;
      background: transparent;
      color: var(--text);
      font-size: 1.1rem;
      padding: var(--space-md) var(--space-lg);
      outline: none;
    }

    .search-input-glow::placeholder {
      color: var(--muted);
    }

    .search-button-glow {
      padding: var(--space-md) var(--space-xl);
      background: var(--gradient-primary);
      border: none;
      border-radius: var(--radius-pill);
      color: white;
      font-weight: var(--font-weight-semibold);
      cursor: pointer;
      transition: all var(--transition-normal);
      display: flex;
      align-items: center;
      gap: var(--space-sm);
    }

    .search-button-glow:hover {
      transform: scale(1.05);
      box-shadow: var(--shadow-neon);
    }

    .search-form {
      max-width: 800px;
      margin: 0 auto;
    }

    .search-wrapper {
      display: flex;
      gap: var(--space-md);
      background: var(--glass-bg);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border: 1px solid var(--glass-border);
      border-radius: var(--radius-pill);
      padding: var(--space-sm);
      box-shadow: var(--glass-shadow);
    }

    .search-input {
      flex: 1;
      border: none;
      background: transparent;
      color: var(--text);
      font-size: 1.1rem;
      padding: var(--space-md) var(--space-lg);
      outline: none;
    }

    .search-input::placeholder {
      color: var(--muted);
    }

    .search-input:focus {
      box-shadow: var(--shadow-neon);
    }

    .search-button {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-md) var(--space-xl);
      background: var(--gradient-primary);
      border: none;
      border-radius: var(--radius-pill);
      color: white;
      font-weight: var(--font-weight-semibold);
      cursor: pointer;
      transition: all var(--transition-normal);
    }

    .search-button:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-neon);
    }

    /* Main Content */
    .main-content {
      padding-bottom: var(--space-3xl);
    }

    /* Results Header */
    .results-header {
      margin-bottom: var(--space-2xl);
      padding-bottom: var(--space-lg);
      border-bottom: 1px solid var(--glass-border);
    }

    .results-info {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      flex-wrap: wrap;
    }

    .results-count {
      color: var(--muted);
      font-size: 1.1rem;
    }

    .results-query {
      font-weight: var(--font-weight-semibold);
      color: var(--primary);
      font-size: 1.1rem;
    }

    /* Books Grid */
    .books-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: var(--space-xl);
    }

    /* Book Cards */
    .book-card {
      border-radius: var(--radius-xl);
      overflow: hidden;
      transition: all var(--transition-normal);
      position: relative;
    }

    .book-card:hover {
      transform: translateY(-4px) rotateX(5deg);
      box-shadow: var(--shadow-neon);
    }

    /* Book Flip Animation */
    .book-flip-btn {
      position: relative;
      overflow: hidden;
    }

    .book-flip-animation {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 20px;
      height: 20px;
      pointer-events: none;
      opacity: 0;
      transition: opacity var(--transition-normal);
    }

    .book-flip-btn:hover .book-flip-animation {
      opacity: 1;
    }

    .book-content {
      display: flex;
      flex-direction: column;
      height: 100%;
      text-decoration: none;
      color: inherit;
    }

    .book-cover {
      aspect-ratio: 3/4;
      background: var(--bg-soft);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }

    .book-cover img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform var(--transition-normal);
    }

    .book-card:hover .book-cover img {
      transform: scale(1.05);
    }

    .cover-placeholder {
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--muted);
      background: var(--bg-soft);
    }

    .book-info {
      padding: var(--space-lg);
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    .source-badge {
      margin-bottom: var(--space-md);
      align-self: flex-start;
    }

    .book-title {
      font-size: 1.2rem;
      font-weight: var(--font-weight-semibold);
      margin: 0 0 var(--space-sm) 0;
      line-height: 1.3;
      color: var(--text);
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .book-author {
      color: var(--muted);
      font-size: 0.95rem;
      margin: 0 0 var(--space-lg) 0;
      line-height: 1.4;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .book-actions {
      display: flex;
      gap: var(--space-sm);
      margin-top: auto;
    }

    .btn-disabled {
      background: var(--muted);
      color: var(--bg);
      cursor: not-allowed;
      opacity: 0.6;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: var(--space-3xl);
      max-width: 500px;
      margin: 0 auto;
    }

    .empty-icon {
      font-size: 4rem;
      margin-bottom: var(--space-lg);
    }

    .empty-state h3 {
      font-size: 1.5rem;
      font-weight: var(--font-weight-semibold);
      margin: 0 0 var(--space-md) 0;
      color: var(--text);
    }

    .empty-state p {
      color: var(--muted);
      margin: 0 0 var(--space-xl) 0;
      line-height: 1.6;
    }

    /* Search Tip */
    .search-tip {
      text-align: center;
      margin-top: var(--space-2xl);
      padding: var(--space-lg);
      background: var(--glass-bg);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border: 1px solid var(--glass-border);
      border-radius: var(--radius-lg);
    }

    .search-tip p {
      margin: 0;
      color: var(--muted);
      font-size: 0.95rem;
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      .books-grid {
        grid-template-columns: 1fr;
      }

      .search-wrapper {
        flex-direction: column;
        gap: var(--space-sm);
      }

      .search-button {
        justify-content: center;
      }

      .results-info {
        flex-direction: column;
        align-items: flex-start;
        gap: var(--space-xs);
      }
    }

    /* Reduced Motion */
    @media (prefers-reduced-motion: reduce) {
      .book-card:hover {
        transform: none;
      }

      .book-cover img {
        transition: none;
      }

      .book-card:hover .book-cover img {
        transform: none;
      }
    }
  </style>

  <!-- Read Page Scripts -->
  <script defer src="/js/read-page.js<%= buildId ? `?v=${buildId}` : '' %>"></script>
  
  <script>
    // Tiny "Listen preview" for Gutenberg cards
    (function(){
      const buttons = document.querySelectorAll('.preview-tts');
      if (!('speechSynthesis' in window)) return;

      function speak(text){
        window.speechSynthesis.cancel();
        const u = new SpeechSynthesisUtterance(text);
        u.rate = 1.0; u.volume = 1.0;
        window.speechSynthesis.speak(u);
      }
      async function firstChunk(gid){
        try{
          const r = await fetch('/read/gutenberg/' + encodeURIComponent(gid) + '/text', { credentials:'same-origin' });
          if (!r.ok) return '';
          const data = await r.json();
          let raw = (data && data.content) ? data.content : '';
          if (data && data.type === 'html') {
            const div = document.createElement('div');
            div.innerHTML = raw;
            raw = div.textContent || div.innerText || '';
          }
          // take a sensible bite
          return String(raw).trim().slice(0, 1200);
        }catch(e){
          return '';
        }
      }
      buttons.forEach(btn => {
        btn.addEventListener('click', async (ev)=>{
          ev.preventDefault(); ev.stopPropagation();
          const gid = btn.getAttribute('data-gid');
          btn.disabled = true; btn.textContent = '⏳';
          const chunk = await firstChunk(gid);
          btn.disabled = false; btn.textContent = '🔊 Listen';
          if (!chunk) { alert('Could not fetch a preview.'); return; }
          speak(chunk);
        });
      });
    })();
  </script>
</body>
</html>
