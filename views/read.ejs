<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: (typeof pageTitle !== 'undefined' && pageTitle) ? pageTitle : 'Explore Free Books',
    pageDescription: (typeof pageDescription !== 'undefined' && pageDescription) ? pageDescription : 'Search and read books in a clean, unified reader.'
  }) %>
  <style>
    .wrap{max-width:1200px;margin:0 auto;padding:1.25rem}
    .back-link{display:inline-block;margin:.5rem 0 .75rem;color:#334155;text-decoration:none}
    h1{font-size:1.75rem;margin:.25rem 0 1rem}
    
    /* Sticky search bar */
    .search-container{
      position:sticky;top:0;z-index:100;
      background:rgba(255,255,255,0.95);backdrop-filter:blur(10px);
      border-bottom:1px solid #e5e7eb;margin:0 -1.25rem 1.25rem;padding:1.25rem;
      box-shadow:0 2px 8px rgba(0,0,0,0.1)
    }
    
    form.search{display:flex;gap:.75rem;max-width:800px;margin:0 auto}
    form.search input[type="text"]{
      flex:1;border:2px solid #e5e7eb;border-radius:2rem;padding:.75rem 1.25rem;
      font-size:1.1rem;transition:all 0.2s;box-shadow:0 2px 4px rgba(0,0,0,0.05)
    }
    form.search input[type="text"]:focus{
      outline:none;border-color:#4f46e5;box-shadow:0 0 0 3px rgba(79,70,229,0.1)
    }
    form.search button{
      border:none;background:#4f46e5;color:#fff;border-radius:2rem;padding:.75rem 1.5rem;
      font-weight:600;font-size:1rem;cursor:pointer;transition:all 0.2s;box-shadow:0 2px 4px rgba(79,70,229,0.2)
    }
    form.search button:hover{background:#4338ca;transform:translateY(-1px);box-shadow:0 4px 8px rgba(79,70,229,0.3)}

    /* Results header */
    .results-header{
      display:flex;align-items:center;justify-content:space-between;margin-bottom:1.5rem;
      padding-bottom:1rem;border-bottom:1px solid #e5e7eb
    }
    .results-count{font-size:1.1rem;color:#6b7280}
    .results-query{font-weight:600;color:#111827}

    /* Responsive grid */
    .grid{
      display:grid;gap:1.5rem;
      grid-template-columns:repeat(auto-fill,minmax(280px,1fr))
    }
    @media (max-width:640px){ .grid{grid-template-columns:1fr} }
    @media (min-width:641px) and (max-width:1024px){ .grid{grid-template-columns:repeat(auto-fill,minmax(250px,1fr))} }
    @media (min-width:1025px){ .grid{grid-template-columns:repeat(auto-fill,minmax(300px,1fr))} }

    /* Enhanced cards */
    .card{
      background:#fff;border:1px solid #e5e7eb;border-radius:1rem;overflow:hidden;
      display:flex;flex-direction:column;transition:all 0.2s;box-shadow:0 2px 8px rgba(0,0,0,0.05)
    }
    .card:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(0,0,0,0.1);border-color:#d1d5db}
    
    .thumb{background:#f8fafc;aspect-ratio:3/4;display:grid;place-items:center;position:relative}
    .thumb img{width:100%;height:100%;object-fit:cover}
    .thumb .hint{color:#9ca3af;font-size:.9rem}
    
    .meta{padding:1rem}
    .badge{
      display:inline-block;font-size:.75rem;font-weight:600;border-radius:1rem;padding:.25rem .75rem;margin-bottom:.75rem;
      text-transform:uppercase;letter-spacing:.025em
    }
    .badge.gutenberg{color:#059669;background:#d1fae5;border:1px solid #a7f3d0}
    .badge.archive{color:#7c3aed;background:#ede9fe;border:1px solid #c4b5fd}
    .badge.openlibrary{color:#dc2626;background:#fee2e2;border:1px solid #fca5a5}
    .badge.loc{color:#1d4ed8;background:#dbeafe;border:1px solid #93c5fd}
    .badge.wikisource{color:#ea580c;background:#fed7aa;border:1px solid #fdba74}
    
    .title{font-weight:700;font-size:1.1rem;margin:.25rem 0 .5rem;line-height:1.3;color:#111827}
    .author{color:#6b7280;font-size:.9rem;margin-bottom:.75rem;line-height:1.4}
    
    .actions{display:flex;gap:.5rem;margin-top:.75rem}
    .btn{
      border:1px solid #e2e8f0;background:#fff;border-radius:.75rem;padding:.5rem .75rem;
      font-weight:600;color:#111827;text-decoration:none;display:inline-flex;align-items:center;gap:.35rem;
      transition:all 0.2s;font-size:.9rem
    }
    .btn:hover{background:#f8fafc;border-color:#d1d5db}
    .btn.primary{background:#4f46e5;color:#fff;border-color:#4f46e5}
    .btn.primary:hover{background:#4338ca;border-color:#4338ca}
    .btn.small{padding:.4rem .6rem;font-size:.85rem}
    
    /* Empty state */
    .empty{
      border:2px dashed #e5e7eb;border-radius:1rem;padding:3rem 2rem;text-align:center;
      color:#6b7280;background:#f9fafb
    }
    .empty h3{margin:0 0 .5rem 0;color:#374151;font-size:1.2rem}
    .empty p{margin:0;font-size:1rem}
    
    /* Skeleton loader */
    .skeleton{background:linear-gradient(90deg,#f0f0f0 25%,#e0e0e0 50%,#f0f0f0 75%);background-size:200% 100%;animation:loading 1.5s infinite}
    @keyframes loading{0%{background-position:200% 0}100%{background-position:-200% 0}}
    
    .hint{color:#6b7280;margin:1rem 0;text-align:center;font-size:.9rem}
    
    @media (max-width:640px){ 
      h1{font-size:1.4rem}
      .search-container{padding:1rem;margin:0 -1rem 1rem}
      .wrap{padding:1rem}
    }
  </style>
</head>
<body>
  <%- include('./partials/navbar.ejs') %>

  <div class="wrap">
    <a class="back-link" href="javascript:history.back()">‚Üê Back</a>
    <h1>üìö Explore Free Books</h1>

    <!-- Sticky search bar -->
    <div class="search-container">
      <form class="search" action="/read" method="GET" role="search">
        <input type="text" name="query" placeholder="Search title or author..." value="<%= (typeof query !== 'undefined' && query) ? query : '' %>" aria-label="Search books">
        <button type="submit">Search</button>
      </form>
    </div>

    <% const hasQuery = (typeof query !== 'undefined' && String(query).trim() !== ''); %>

    <% if (hasQuery) { %>
      <!-- Results header -->
      <div class="results-header">
        <div>
          <span class="results-count">Results for</span>
          <span class="results-query">"<%= query %>"</span>
          <span class="results-count">(<%= books ? books.length : 0 %> found)</span>
        </div>
      </div>
    <% } %>

    <% function textOf(x){ if (!x) return ''; if (Array.isArray(x)) return x.join(', '); if (typeof x === 'object') return (x.name||x.title||x.text||''); return String(x); } %>

    <% if (!books || books.length === 0) { %>
      <% if (hasQuery) { %>
        <div class="empty">
          <h3>No exact matches found</h3>
          <p>Try fewer words or different spelling. You can also browse without searching.</p>
        </div>
      <% } else { %>
        <div class="empty">
          <h3>Start exploring</h3>
          <p>Search for books by title, author, or topic to get started.</p>
        </div>
      <% } %>
    <% } else { %>
      <div class="grid">
        <% books.forEach(function(book){ 
             const src   = String(book.source || '').toLowerCase();
             const id    = book.identifier || book._id || '';
             const title = textOf(book.title) || 'Untitled';
             const creator = textOf(book.creator || book.author || '');
             const cover = book.cover || '';
             const gid   = book.gutenId || book.gid || (String(id).startsWith('gutenberg:') ? String(id).split(':')[1] : null);
             const wsLang  = book.wsLang || '';
             const wsTitle = book.wsTitle || '';

             // Decide destination based on new card structure
             let dest = '#';
             let isDisabled = false;
             
             if (book.href && book.openInline === true) {
               // New structure: use href for on-site reading
               dest = book.href;
             } else if (book.readerUrl) {
               // Legacy structure: use readerUrl
               dest = book.readerUrl;
             } else if (src === 'gutenberg' && gid) {
               // Force EPUB mode so the reader opens ePub.js
               const qs = '?mode=epub'
                 + (title ? ('&title=' + encodeURIComponent(title)) : '')
                 + (creator ? ('&author=' + encodeURIComponent(creator)) : '');
               dest = `/read/gutenberg/${encodeURIComponent(gid)}/reader${qs}`;
             } else if (src === 'wikisource' && wsLang && wsTitle) {
               dest = `/read/wikisource/${encodeURIComponent(wsLang)}/${encodeURIComponent(wsTitle)}/reader`;
             } else if (book.pdfUrl) {
               // Our PDF viewer page (see pdf-viewer.ejs)
               const qs = '?src=' + encodeURIComponent(book.pdfUrl) 
                 + (title ? ('&title=' + encodeURIComponent(title)) : '');
               dest = '/read/pdf' + qs;
             }

             // Gate visitors to login before reading (unless disabled)
             let finalHref = isDisabled ? '#' : (dest || '#');
             
             // Get badge class
             let badgeClass = '';
             if (src === 'gutenberg') badgeClass = 'gutenberg';
             else if (src === 'archive') badgeClass = 'archive';
             else if (src === 'openlibrary') badgeClass = 'openlibrary';
             else if (src === 'loc') badgeClass = 'loc';
             else if (src === 'wikisource') badgeClass = 'wikisource';
             %>
          <div class="card" data-source="<%= src %>">
            <% if (isDisabled) { %>
              <div style="text-decoration:none;color:inherit">
                <div class="thumb">
                  <% if (cover) { %>
                    <img src="<%= cover %>" alt="" loading="lazy" referrerpolicy="no-referrer">
                  <% } else { %>
                    <div class="hint">No cover</div>
                  <% } %>
                </div>
                <div class="meta">
                  <% if (src) { %>
                    <div class="badge <%= badgeClass %>"><%= (src==='gutenberg'?'Gutenberg':(src==='openlibrary'?'Open Library':(src==='archive'?'Archive.org':(src==='wikisource'?'Wikisource':(src==='loc'?'LOC':src))))) %></div>
                  <% } %>
                  <div class="title"><%= title %></div>
                  <% if (creator) { %><div class="author"><%= creator %></div><% } %>
                  <div class="actions">
                    <span class="btn small" style="background:#f3f4f6;color:#6b7280;border-color:#d1d5db;cursor:not-allowed;">üìñ Read</span>
                  </div>
                </div>
              </div>
            <% } else { %>
              <a href="<%= (user ? finalHref : ('/login?next=' + encodeURIComponent(finalHref))) %>" style="text-decoration:none;color:inherit">
                <div class="thumb">
                  <% if (cover) { %>
                    <img src="<%= cover %>" alt="" loading="lazy" referrerpolicy="no-referrer">
                  <% } else { %>
                    <div class="hint">No cover</div>
                  <% } %>
                </div>
                <div class="meta">
                  <% if (src) { %>
                    <div class="badge <%= badgeClass %>"><%= (src==='gutenberg'?'Gutenberg':(src==='openlibrary'?'Open Library':(src==='archive'?'Archive.org':(src==='wikisource'?'Wikisource':(src==='loc'?'LOC':src))))) %></div>
                  <% } %>
                  <div class="title"><%= title %></div>
                  <% if (creator) { %><div class="author"><%= creator %></div><% } %>
                  <div class="actions">
                    <span class="btn primary small">üìñ Read</span>
                    <% if (src === 'gutenberg' && gid) { %>
                      <button type="button" class="btn small preview-tts" data-gid="<%= gid %>" data-title="<%- title %>" aria-pressed="false" title="Preview first page by listening">üîä Listen</button>
                    <% } %>
                  </div>
                </div>
              </a>
            <% } %>
          </div>
        <% }) %>
      </div>
    <% } %>

    <div class="hint">
      Tip: "Listen" previews read the first page of a Project Gutenberg book without leaving this page.
    </div>
  </div>

  <script>
    // Tiny "Listen preview" for Gutenberg cards
    (function(){
      const buttons = document.querySelectorAll('.preview-tts');
      if (!('speechSynthesis' in window)) return;

      function speak(text){
        window.speechSynthesis.cancel();
        const u = new SpeechSynthesisUtterance(text);
        u.rate = 1.0; u.volume = 1.0;
        window.speechSynthesis.speak(u);
      }
      async function firstChunk(gid){
        try{
          const r = await fetch('/read/gutenberg/' + encodeURIComponent(gid) + '/text', { credentials:'same-origin' });
          if (!r.ok) return '';
          const data = await r.json();
          let raw = (data && data.content) ? data.content : '';
          if (data && data.type === 'html') {
            const div = document.createElement('div');
            div.innerHTML = raw;
            raw = div.textContent || div.innerText || '';
          }
          // take a sensible bite
          return String(raw).trim().slice(0, 1200);
        }catch(e){
          return '';
        }
      }
      buttons.forEach(btn => {
        btn.addEventListener('click', async (ev)=>{
          ev.preventDefault(); ev.stopPropagation();
          const gid = btn.getAttribute('data-gid');
          btn.disabled = true; btn.textContent = '‚è≥';
          const chunk = await firstChunk(gid);
          btn.disabled = false; btn.textContent = 'üîä Listen';
          if (!chunk) { alert('Could not fetch a preview.'); return; }
          speak(chunk);
        });
      });
    })();
  </script>
</body>
</html>
