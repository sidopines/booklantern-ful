<!doctype html>
<html lang="en">
<head>
  <%- include('./partials/head', { pageTitle: 'Read - BookLantern' }) %>
  <script defer src="https://cdn.jsdelivr.net/npm/epubjs/dist/epub.min.js"></script>
</head>
<body>
  <%- include('./partials/navbar') %>
  <%- include('./partials/backLink', { referrer }) %>

  <main class="stack" style="--gap:16px; padding:16px;">
    <h1 id="title">Book Title</h1>

    <div class="actions row" style="gap:8px;">
      <button class="btn" id="btnBookmark">ðŸ”– Bookmark</button>
      <button class="btn" id="btnNotes">ðŸ—’ Notes</button>
      <button class="btn" id="btnListen">ðŸ”Š Listen</button>
    </div>

    <div id="reader" class="card" style="min-height:70vh; overflow:auto; padding:0;"></div>
    <div id="fallback" class="card" style="display:none; padding:16px;">Loading book...</div>
  </main>

  <%- include('./partials/footer') %>

  <script>
  (async function () {
    const provider = "<%= provider %>";
    const id = "<%= id %>";
    const r = await fetch(`/api/book?provider=${encodeURIComponent(provider)}&id=${encodeURIComponent(id)}`);
    const data = await r.json();

    document.getElementById('title').textContent =
      [data.title, data.author].filter(Boolean).join(' â€” ') || 'Book';

    const mount = document.getElementById('reader');
    const fallback = document.getElementById('fallback');

    if (data.type === 'epub' && data.epubUrl) {
      try {
        const book = ePub(data.epubUrl);
        const rendition = book.renderTo(mount, { width: "100%", height: "75vh", spread: "always" });
        rendition.display();
      } catch (e) {
        fallback.style.display = 'block';
        mount.style.display = 'none';
      }
      return;
    }

    if (data.type === 'html' || data.type === 'text') {
      mount.style.padding = '16px';
      mount.innerHTML = (data.type === 'text')
        ? `<pre style="white-space:pre-wrap;word-wrap:break-word;">${escapeHtml(data.content || '')}</pre>`
        : (data.content || '<p>Not available.</p>');
      return;
    }

    fallback.style.display = 'block';
  })();

  function escapeHtml(s){
    return String(s).replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
  }
  </script>
</body>
</html>
