<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: typeof pageTitle !== 'undefined' ? pageTitle : 'Reader',
    pageDescription: typeof pageDescription !== 'undefined' ? pageDescription : 'Read in a distraction-free reader.'
  }) %>
  <style>
    :root { --bar:#fff; --border:#e5e7eb; --muted:#667085; }
    body,html { height:100%; }
    .wrap { display:flex; flex-direction:column; height:100vh; }
    .topbar{
      position:sticky; top:0; z-index:5;
      display:flex; gap:8px; align-items:center; justify-content:flex-start;
      background:var(--bar); border-bottom:1px solid var(--border);
      padding:10px 12px;
    }
    .title{ margin-left:8px; font-weight:600; }
    .muted{ color:var(--muted); font-weight:400; }
    .btn{ padding:.45rem .6rem; border:1px solid var(--border); border-radius:10px; background:#fff; cursor:pointer; }
    .grow{ flex:1; }
    #viewer{
      flex:1; min-height: 0; /* allows the child to grow in flex container */
      height: calc(100vh - 52px);
    }
    /* EPUB.js paginated area needs fixed height */
    #viewer .epub-container { height: 100% !important; }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="topbar">
      <a href="javascript:history.back()" class="btn">← Back</a>
      <div class="title">
        <%= typeof title !== 'undefined' ? title : 'Book' %>
        <% if (typeof author !== 'undefined' && author) { %>
          <span class="muted"> — <%= author %></span>
        <% } %>
      </div>
      <div class="grow"></div>
      <!-- basic listen controls (browser TTS) -->
      <button id="listenBtn" class="btn">▶ Listen</button>
      <button id="stopBtn" class="btn">■ Stop</button>
    </div>

    <div id="viewer"></div>
  </div>

  <!-- EPUB.js (CDN) -->
  <script src="https://cdn.jsdelivr.net/npm/epubjs@0.3/dist/epub.min.js"></script>
  <script>
    (function(){
      const EPUB_URL = "<%- typeof epubUrl !== 'undefined' ? epubUrl : '' %>";
      if (!EPUB_URL) {
        document.getElementById('viewer').innerHTML = '<div style="padding:16px;color:#b42318">No EPUB provided.</div>';
        return;
      }

      // Init EPUB.js
      const book = ePub(EPUB_URL);
      const rendition = book.renderTo("viewer", { width: "100%", height: "100%", spread: "always", flow: "paginated" });
      rendition.display();

      // Listen controls (simple — reads the visible text)
      function currentText(){
        try {
          const doc = rendition.getContents()[0]?.document;
          if (!doc) return '';
          const body = doc.querySelector('body');
          return (body ? (body.innerText || body.textContent || '') : '').replace(/\s+/g,' ').trim();
        } catch(_) { return ''; }
      }
      const listenBtn = document.getElementById('listenBtn');
      const stopBtn   = document.getElementById('stopBtn');

      function speak(text){
        try { window.speechSynthesis.cancel(); } catch(e){}
        if (!text) return;
        const u = new SpeechSynthesisUtterance(text);
        u.rate = 1; u.pitch = 1;
        const voices = window.speechSynthesis.getVoices();
        if (voices && voices.length) u.voice = voices.find(v => /en/i.test(v.lang)) || voices[0];
        window.speechSynthesis.speak(u);
      }
      listenBtn.addEventListener('click', () => speak(currentText()));
      stopBtn.addEventListener('click', () => { try { window.speechSynthesis.cancel(); } catch(_){}; });

      // Re-speak on page change if actively listening (optional)
      // rendition.on('relocated', () => { /* can auto-continue */ });
    })();
  </script>
</body>
</html>
