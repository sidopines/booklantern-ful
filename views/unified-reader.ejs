<!doctype html>
<html lang="en">
<head>
  <%
    const t = (typeof pageTitle !== 'undefined' && pageTitle) ? pageTitle : `Read • ${gid}`;
    const d = (typeof pageDescription !== 'undefined' && pageDescription) ? pageDescription : `Read this book on BookLantern in a clean, paginated reader.`;
  %>
  <%- include('./partials/head.ejs', { pageTitle: t, pageDescription: d }) %>
  <style>
    :root{
      --ink:#0f172a; --muted:#64748b; --line:#e2e8f0; --bg:#ffffff; --bg-soft:#f8fafc; --brand:#5b7cfa;
    }
    html,body{height:100%;margin:0;background:var(--bg);color:var(--ink);
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, Helvetica, Arial, sans-serif;}
    .app{display:flex;flex-direction:column;height:100vh}

    .toolbar{
      position:sticky; top:0; z-index:20;
      display:flex; align-items:center; gap:.5rem;
      padding:.5rem .75rem; background:linear-gradient(180deg,#fff,#fbfdff);
      border-bottom:1px solid var(--line);
    }
    .brand{display:flex;align-items:center;gap:.5rem;text-decoration:none;color:var(--ink);font-weight:800}
    .brand img{width:20px;height:20px}
    .spacer{flex:1}
    .btn{appearance:none;border:1px solid var(--line);background:#fff;color:var(--ink);
      padding:.45rem .65rem;border-radius:10px;cursor:pointer;font-weight:600}
    .btn:hover{filter:brightness(.97)}
    .btn.primary{background:var(--brand);color:#fff;border-color:transparent}
    .seg{display:inline-flex;border:1px solid var(--line);border-radius:10px;overflow:hidden}
    .seg button{border:0;border-right:1px solid var(--line);background:#fff;padding:.45rem .6rem}
    .seg button:last-child{border-right:0}
    .seg button.active{background:#eef2ff;font-weight:700}

    .stage{
      display:grid; grid-template-columns: 60px 1fr 60px; gap:0;
      background:var(--bg-soft); min-height:0; flex:1;
    }
    .navbtn{border:0; background:transparent; cursor:pointer; color:var(--muted); font-weight:700}
    .navbtn:hover{color:var(--ink)}
    .canvas-wrap{position:relative; min-width:0; overflow:hidden}
    .canvas{
      height:100%; width:100%;
      padding:32px 28px;
      column-gap:48px;
      column-fill:auto;
      overflow:auto;
      background:#fff;
      border-left:1px solid var(--line); border-right:1px solid var(--line);
    }
    .page{break-inside:avoid}
    .canvas p{margin:0 0 1rem 0; line-height:1.55}
    .canvas .h1{font-weight:800;font-size:1.4rem;margin:0 0 1rem}
    .canvas .h2{font-weight:700;font-size:1.15rem;margin:1.2rem 0 .4rem}
    .meta{color:var(--muted); font-size:.9rem; padding:.4rem .75rem; border-bottom:1px solid var(--line); background:#fff}

    .theme-dark .canvas{ background:#0b1020; color:#e5ecff; border-color:#1b2545}
    .theme-dark .meta{ background:#0b1020; color:#a8b3cf; border-color:#1b2545}
    .theme-sepia .canvas{ background:#fbf1e2; color:#3b2918; }
    .theme-sepia .meta{ background:#fbf1e2; color:#725b43; }

    @media (max-width:900px){
      .stage{ grid-template-columns: 44px 1fr 44px; }
      .canvas{ padding:24px 20px; column-gap:36px }
    }
    @media (max-width:640px){
      .brand span{display:none}
      .stage{ grid-template-columns: 36px 1fr 36px; }
      .canvas{ padding:18px 16px; column-gap:28px }
    }
  </style>
</head>
<body>
<div id="app" class="app theme-light">
  <div class="toolbar" role="navigation" aria-label="Reader toolbar">
    <a class="brand" href="/"><img src="/img/brand.svg" alt=""><span>BookLantern</span></a>
    <button class="btn" onclick="history.back()">← Back</button>
    <div class="spacer"></div>

    <div class="seg" role="group" aria-label="Theme">
      <button id="th-light" class="active" onclick="setTheme('light')">Light</button>
      <button id="th-sepia" onclick="setTheme('sepia')">Sepia</button>
      <button id="th-dark" onclick="setTheme('dark')">Dark</button>
    </div>

    <div class="seg" role="group" aria-label="Text size">
      <button onclick="bump(-1)">A−</button>
      <button onclick="bump(1)">A+</button>
    </div>

    <div class="seg" role="group" aria-label="Typeface">
      <button id="tf-serif" onclick="setFace('serif')">Serif</button>
      <button id="tf-sans" class="active" onclick="setFace('sans')">Sans</button>
    </div>

    <div class="seg" role="group" aria-label="Listen">
      <button id="listen-play" onclick="listenToggle()">► Listen</button>
      <button id="listen-stop" onclick="listenStop()">■</button>
    </div>
  </div>

  <div class="meta" id="titlebar">Loading…</div>

  <div class="stage">
    <button class="navbtn" onclick="page(-1)" aria-label="Previous page">‹</button>
    <div class="canvas-wrap">
      <div id="canvas" class="canvas" tabindex="0" role="document" aria-label="Book pages"></div>
    </div>
    <button class="navbtn" onclick="page(1)" aria-label="Next page">›</button>
  </div>
</div>

<script>
  const GID = "<%= gid %>";
  const START_URL = "<%= typeof startUrl === 'string' ? startUrl : '' %>";

  const app = document.getElementById('app');
  const canvas = document.getElementById('canvas');
  const titlebar = document.getElementById('titlebar');

  let fontSize = 18; let face = 'sans';
  function applyTypography(){
    canvas.style.fontSize = fontSize + 'px';
    canvas.style.fontFamily = face === 'serif'
      ? "Georgia, 'Times New Roman', Times, serif"
      : "Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif";
    const w = canvas.clientWidth || canvas.getBoundingClientRect().width || 800;
    canvas.style.columnWidth = Math.max(360, Math.floor(w)) + 'px';
  }
  function setFace(f){
    face = f;
    document.getElementById('tf-serif').classList.toggle('active', f==='serif');
    document.getElementById('tf-sans').classList.toggle('active', f==='sans');
    applyTypography();
  }
  function bump(dir){
    fontSize = Math.min(28, Math.max(14, fontSize + (dir>0 ? 1 : -1)));
    applyTypography();
  }
  function setTheme(name){
    app.classList.remove('theme-light','theme-sepia','theme-dark');
    app.classList.add('theme-'+name);
    document.getElementById('th-light').classList.toggle('active', name==='light');
    document.getElementById('th-sepia').classList.toggle('active', name==='sepia');
    document.getElementById('th-dark').classList.toggle('active', name==='dark');
  }
  function page(dir){
    const delta = (canvas.clientWidth || 800) - 32;
    canvas.scrollBy({ left: dir>0 ? delta : -delta, behavior: 'smooth' });
  }
  window.addEventListener('resize', applyTypography);

  // --- Listen (browser TTS) ---
  function listenToggle(){
    if ('speechSynthesis' in window === false) { alert('Text-to-speech is not supported in this browser.'); return; }
    if (speechSynthesis.speaking && !speechSynthesis.paused){ speechSynthesis.pause(); return; }
    if (speechSynthesis.paused){ speechSynthesis.resume(); return; }
    const text = canvas.innerText.slice(0, 250000);
    const u = new SpeechSynthesisUtterance(text);
    u.rate = 1.0; speechSynthesis.speak(u);
  }
  function listenStop(){ if (speechSynthesis) speechSynthesis.cancel(); }

  // --- Cleaners / parsers ---
  function stripGutenbergLicense(str){
    try{
      const start = str.search(/START OF (THIS|THE) PROJECT GUTENBERG EBOOK/i);
      const end   = str.search(/END OF THE PROJECT GUTENBERG EBOOK/i);
      if (start >= 0 && end > start) return str.slice(start).replace(/.*?\n/,'').slice(0, end - start);
      return str;
    }catch(_){ return str; }
  }

  function htmlToParagraphs(html){
    const tmp = document.createElement('div');
    tmp.innerHTML = html;

    // Remove non-content
    tmp.querySelectorAll('style,script,noscript,header,footer,nav').forEach(n=>n.remove());
    // Common Gutenberg wrappers
    tmp.querySelectorAll('[id^="pg-"], .pgheader, .pgfooter, .copyright, .license, .catalog, .toc').forEach(n=>n.remove());

    // Extract content nodes
    const nodes = tmp.querySelectorAll('h1,h2,h3,h4,p,li,blockquote');
    const out = [];
    nodes.forEach(n => {
      let t = (n.textContent || '').replace(/\s+/g,' ').trim();
      if (!t) return;
      if (n.tagName === 'LI') t = '• ' + t;
      out.push(t);
    });

    if (out.length) return out;

    // Fallback: plain text split
    const text = (tmp.textContent || '').replace(/\r/g,'');
    return text.split(/\n{2,}/).map(s => s.trim()).filter(Boolean);
  }

  function textToParagraphs(txt){
    const clean = stripGutenbergLicense(txt).replace(/\r/g,'');
    return clean.split(/\n{2,}/).map(s => s.trim()).filter(Boolean);
  }

  function renderParagraphs(paras, title){
    titlebar.textContent = title || ('Project Gutenberg #' + GID);
    const frag = document.createDocumentFragment();
    if (title) {
      const h = document.createElement('div'); h.className='h1 page'; h.textContent = title;
      frag.appendChild(h);
    }
    for (const p of paras){
      const el = document.createElement('p'); el.textContent = p; frag.appendChild(el);
    }
    canvas.textContent = '';
    canvas.appendChild(frag);
    applyTypography();
  }

  async function loadText(){
    try{
      const r = await fetch(`/read/gutenberg/${GID}/text`, { credentials:'same-origin' });
      if (!r.ok) throw new Error('bad status');
      const data = await r.json(); // { type:'text'|'html', content, title }
      const title = data.title || '';
      if (data.type === 'html'){
        const paras = htmlToParagraphs(String(data.content||''));
        renderParagraphs(paras, title);
      } else {
        const paras = textToParagraphs(String(data.content||''));
        renderParagraphs(paras, title);
      }
    }catch(e){
      console.error('reader fetch error', e);
      titlebar.textContent = 'Could not load book. You can try the source page (opens in a new tab).';
      const a = document.createElement('a');
      a.href = START_URL || `https://www.gutenberg.org/ebooks/${GID}`;
      a.target = '_blank'; a.rel = 'noopener';
      a.textContent = 'Open on Project Gutenberg ↗';
      const p = document.createElement('p'); p.appendChild(a);
      canvas.textContent = ''; canvas.appendChild(p);
    }
  }

  setTheme('light'); setFace('sans'); applyTypography(); loadText();
  document.addEventListener('keydown', (e)=>{
    if (e.key === 'ArrowRight') page(1);
    else if (e.key === 'ArrowLeft') page(-1);
  });
</script>
</body>
</html>
