<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: typeof pageTitle !== 'undefined' ? pageTitle : 'Reader',
    pageDescription: typeof pageDescription !== 'undefined' ? pageDescription : 'Read in a clean, unified reader.'
  }) %>
  <style>
    :root {
      --bg: #ffffff; --ink:#0f172a; --muted:#475569; --panel:#f8fafc; --border:#e2e8f0;
      --accent:#4f46e5;
    }
    @media (prefers-color-scheme: dark) {
      :root { --bg:#0b0f17; --ink:#e5e7eb; --muted:#94a3b8; --panel:#0f1420; --border:#1f2937; }
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;background:var(--bg);color:var(--ink);font:16px/1.6 Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif}
    header {
      position:sticky; top:0; z-index:5;
      display:flex; align-items:center; gap:.5rem;
      padding:.5rem 1rem; border-bottom:1px solid var(--border); background:linear-gradient(var(--panel), var(--panel));
      backdrop-filter:saturate(1.2) blur(6px);
    }
    header .title { font-weight:600; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
    header .grow { flex:1 1 auto }
    header .btn { border:1px solid var(--border); background:#fff0; color:var(--ink); padding:.35rem .6rem; border-radius:.6rem; cursor:pointer }
    header .btn.primary { background:var(--accent); color:#fff; border-color:transparent }
    header .btn:disabled{opacity:.5; cursor:not-allowed}
    header .seg { display:flex; gap:.35rem; align-items:center }
    header input[type=range]{ vertical-align:middle }

    main { max-width: 880px; margin: 0 auto; padding: 1.25rem; }
    .page { min-height: calc(100dvh - 70px); }
    .page h1,.page h2,.page h3 { line-height:1.25 }
    .page img { max-width:100%; height:auto }
    .page a { color:#2563eb; text-decoration:none }
    .page a:hover { text-decoration:underline }
    .loading { color: var(--muted); padding:2rem 0; text-align:center }
    .error { color: #b91c1c; padding:1rem; border:1px solid #fecaca; background:#fef2f2; border-radius:.6rem }
    .hint  { color: var(--muted); font-size:.9rem }
    .sr-only{ position:absolute; left:-9999px; width:1px; height:1px; overflow:hidden }
  </style>
</head>
<body
  data-mode="<%= typeof mode !== 'undefined' ? mode : 'gutenberg' %>"
  data-src ="<%= typeof src  !== 'undefined' ? src  : '' %>"
>
  <%- include('./partials/navbar.ejs') %>

  <header>
    <button class="btn" id="backBtn" title="Back">← Back</button>
    <div class="title" id="bookTitle"><%= typeof pageTitle !== 'undefined' ? pageTitle : 'Book' %></div>
    <div class="grow"></div>

    <div class="seg">
      <button class="btn" id="prevBtn" title="Previous section">⟵</button>
      <input id="progress" type="range" min="0" max="100" value="0" aria-label="Progress">
      <button class="btn" id="nextBtn" title="Next section">⟶</button>
    </div>

    <div class="seg">
      <button class="btn" id="ttsToggle">▶ Listen</button>
      <button class="btn" id="ttsStop"  disabled>■ Stop</button>
      <label class="sr-only" for="rate">Rate</label>
      <input id="rate" type="range" min="0.5" max="2" step="0.1" value="1">
      <label class="sr-only" for="vol">Volume</label>
      <input id="vol"  type="range" min="0" max="1" step="0.05" value="1">
    </div>
  </header>

  <main>
    <div id="status" class="loading">Loading book…</div>
    <article id="page" class="page" aria-live="polite"></article>
    <p class="hint" id="hint">Tip: Select any passage and press <kbd>S</kbd> to listen only to that selection.</p>
  </main>

  <script>
  (() => {
    const mode = document.body.dataset.mode;     // 'gutenberg' (JSON) or 'html' (proxied HTML)
    const src  = document.body.dataset.src || ''; // endpoint to fetch

    const elStatus = document.getElementById('status');
    const elPage   = document.getElementById('page');
    const elTitle  = document.getElementById('bookTitle');
    const elProg   = document.getElementById('progress');

    const btnBack  = document.getElementById('backBtn');
    const btnPrev  = document.getElementById('prevBtn');
    const btnNext  = document.getElementById('nextBtn');

    const btnTTS   = document.getElementById('ttsToggle');
    const btnStop  = document.getElementById('ttsStop');
    const rngRate  = document.getElementById('rate');
    const rngVol   = document.getElementById('vol');

    btnBack.addEventListener('click', () => history.length > 1 ? history.back() : location.href = '/read');

    let sections = [];
    let idx = 0;

    function sanitizeHtml(html){
      // strip script/style and most inline event handlers
      html = String(html || '');
      html = html.replace(/<script[\s\S]*?<\/script>/gi,'')
                 .replace(/<style[\s\S]*?<\/style>/gi,'')
                 .replace(/\son\w+="[^"]*"/gi,'');
      return html;
    }
    function fromPlainText(txt){
      const safe = sanitizeHtml(txt)
        .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
      return safe.split(/\n{2,}/).map(p => `<p>${p.trim()}</p>`).join('');
    }
    function display(i){
      idx = Math.max(0, Math.min(i, sections.length - 1));
      elPage.innerHTML = sections[idx].html;
      elProg.value = Math.round(100 * (idx+1)/sections.length);
      window.scrollTo({top:0, behavior:'instant'});
    }

    async function load(){
      try{
        if (!src) throw new Error('No source provided');
        let title='';

        if (mode === 'gutenberg'){
          const r = await fetch(src, { credentials:'same-origin' });
          if (!r.ok) throw new Error('Fetch failed');
          const data = await r.json();
          title = data.title || '';
          let html;
          if (data.type === 'html') html = sanitizeHtml(data.content);
          else html = fromPlainText(data.content || '');
          sections = splitSections(html);
        } else if (mode === 'html'){
          const r = await fetch(src, { credentials:'same-origin' });
          if (!r.ok) throw new Error('Fetch failed');
          const data = await r.json(); // { title, html }
          title = data.title || '';
          sections = splitSections(sanitizeHtml(data.html || ''));
        } else {
          throw new Error('Unknown mode');
        }

        if (!sections.length) throw new Error('No readable content');
        elStatus.remove();
        if (title) elTitle.textContent = title;
        display(0);
      } catch(e){
        elStatus.className = 'error';
        elStatus.textContent = 'Could not load this book. ' + (e?.message || '');
      }
    }

    function splitSections(html){
      // Try to segment by big headings; fallback to chunk by ~5k chars
      const tmp = document.createElement('div');
      tmp.innerHTML = html;

      const nodes = [...tmp.querySelectorAll('h1,h2,h3')];
      if (nodes.length >= 2){
        const out = [];
        for (let i=0;i<nodes.length;i++){
          const start = nodes[i];
          const end = nodes[i+1];
          const frag = document.createElement('div');
          let n = start;
          while (n && n !== end){
            const clone = n.cloneNode(true);
            frag.appendChild(clone);
            n = n.nextSibling;
          }
          out.push({ html: frag.innerHTML });
        }
        if (out.length) return out;
      }
      // fallback: chunking
      const clean = tmp.textContent ? fromPlainText(tmp.textContent) : html;
      const size = 5000;
      const chunks = [];
      for (let i=0;i<clean.length;i+=size){
        chunks.push({ html: clean.slice(i,i+size) });
      }
      return chunks;
    }

    // Navigation
    btnPrev.addEventListener('click', () => display(idx-1));
    btnNext.addEventListener('click', () => display(idx+1));
    elProg.addEventListener('input', e => {
      const target = Math.round((sections.length-1) * (e.target.value/100));
      display(target);
    });

    // ── TTS (Web Speech) ─────────────────────────────────────────
    let utter = null;
    function speak(text){
      stopTTS();
      utter = new SpeechSynthesisUtterance(text);
      utter.rate = parseFloat(rngRate.value) || 1;
      utter.volume = parseFloat(rngVol.value) || 1;
      speechSynthesis.speak(utter);
      btnTTS.textContent = '⏸ Pause';
      btnStop.disabled = false;
    }
    function stopTTS(){
      if (speechSynthesis.speaking || speechSynthesis.pending) speechSynthesis.cancel();
      btnTTS.textContent = '▶ Listen';
      btnStop.disabled = true;
    }
    btnTTS.addEventListener('click', () => {
      if (speechSynthesis.speaking && !speechSynthesis.paused) {
        speechSynthesis.pause();
        btnTTS.textContent = '▶ Resume';
      } else if (speechSynthesis.paused){
        speechSynthesis.resume();
        btnTTS.textContent = '⏸ Pause';
      } else {
        // read visible section
        speak(elPage.innerText || elPage.textContent || '');
      }
    });
    btnStop.addEventListener('click', stopTTS);
    window.addEventListener('keydown', e => {
      if (e.key === ' ') { e.preventDefault(); btnTTS.click(); }
      if (e.key === 'Escape') { stopTTS(); }
      if (e.key === 'ArrowLeft') { btnPrev.click(); }
      if (e.key === 'ArrowRight') { btnNext.click(); }
      if (e.key.toLowerCase() === 's') {
        const sel = String(window.getSelection());
        if (sel.trim()) speak(sel.trim());
      }
    });

    load();
  })();
  </script>
</body>
</html>
