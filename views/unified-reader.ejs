<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: (typeof pageTitle !== 'undefined' && pageTitle) ? pageTitle : 'Read',
    pageDescription: (typeof pageDescription !== 'undefined' && pageDescription) ? pageDescription : 'Distraction-free reading'
  }) %>
  <style>
    :root{
      --bg:#0b1020;            /* content bg in ePub mode */
      --paper:#0f1428;         /* page bg in ePub mode */
      --text:#0b1220;          /* toolbar text */
      --ink:#0f172a;           /* text mode ink */
      --muted:#667085;
      --bar:#ffffff;
      --barBG:#ffffff;
      --accent:#4f6ae6;
      --accent2:#eef2ff;
    }
    @media (prefers-color-scheme: dark){
      :root{ --barBG:#0f1428; --bar:#ffffff; }
    }

    html,body{ height:100%; }
    body{
      margin:0;
      background:#f7f8fb;
      color:var(--text);
      font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
      overflow:hidden; /* we page within the viewport */
    }

    /* Top toolbar */
    .reader-bar{
      display:flex; align-items:center; gap:.6rem;
      height:56px; padding:0 .75rem;
      border-bottom:1px solid rgba(17,24,39,.08);
      background:var(--barBG);
      position:sticky; top:0; z-index:10;
    }
    .reader-bar .spacer{ flex:1; }
    .btn{
      display:inline-flex; align-items:center; justify-content:center;
      height:34px; padding:0 .8rem; border-radius:10px;
      border:1px solid rgba(17,24,39,.12); background:#fff; color:#111; cursor:pointer;
      font-weight:600; font-size:.92rem;
    }
    .btn:hover{ background:#f4f6ff; border-color:#dfe4ff; }
    .btn.icon{ width:34px; padding:0; }
    .btn.primary{ background:var(--accent); color:#fff; border-color:transparent; }
    .btn.primary:hover{ filter:brightness(.95); }
    .seg{
      display:inline-flex; align-items:center; gap:.25rem;
      padding:.2rem; border:1px solid rgba(17,24,39,.12); border-radius:12px; background:#fff;
    }
    .seg .btn{ border:0; height:30px; }
    .brand{
      font-weight:800; letter-spacing:.2px; margin-right:.25rem;
    }
    .title{
      font-weight:700; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; max-width:42vw;
    }
    @media (max-width:900px){ .title{ display:none; } }

    /* Viewports */
    #stage{
      position:absolute; inset:56px 0 0 0; /* below bar */
      display:grid; grid-template-columns: 1fr; grid-template-areas: "view";
      background:var(--bg);
    }

    /* ePub canvas */
    #epubView{
      grid-area:view;
      height:100%; width:100%;
      display:flex; align-items:center; justify-content:center;
      background:var(--bg);
    }
    #epubMount{
      height:100%; width:min(1100px, 100%); 
      background:var(--paper);
      box-shadow: 0 20px 80px rgba(0,0,0,.35);
      overflow:hidden;
      border-radius:12px;
    }

    /* Fallback text/HTML mode (column pagination) */
    #textMode{
      grid-area:view; display:none;
      height:100%; width:100%;
      background:#fff; color:var(--ink);
    }
    #textScroller{
      height:100%; width:100%;
      overflow:hidden; /* we pan with JS to emulate pages */
      background:#fff;
    }
    #textColumns{
      height:100%;
      column-width: 48ch;          /* approximate page width */
      column-gap: 4rem;
      padding: 3rem clamp(1rem,3vw,2rem);
      font-size: clamp(16px, 1.9vh, 19px);
      line-height: 1.55;
      hyphens: auto;
    }
    .dim{ color:var(--muted); font-size:.9rem; }

    /* Mini toast */
    .toast{
      position:fixed; bottom:16px; left:50%; transform:translateX(-50%);
      background:#111; color:#fff; padding:.6rem .85rem; border-radius:10px;
      font-size:.9rem; opacity:0; pointer-events:none; transition:.25s;
    }
    .toast.show{ opacity:1; }

    /* Skeleton / error */
    .center{
      display:flex; align-items:center; justify-content:center; height:100%; width:100%;
      color:#9aa0ae;
    }
  </style>
</head>
<body>
  <div class="reader-bar" role="toolbar" aria-label="Reader controls">
    <a class="btn" id="backBtn" href="/read">← Back</a>

    <div class="title">
      <span class="brand">BookLantern</span>
      <span id="bookTitle"><%= (book && book.title) ? book.title : ('Gutenberg #' + (gid||'')) %></span>
      <% if (book && book.creator) { %>
        <span class="dim"> · <%= book.creator %></span>
      <% } %>
    </div>

    <div class="spacer"></div>

    <!-- Paging -->
    <span class="seg" aria-label="Page">
      <button class="btn icon" id="prevBtn" title="Previous page">←</button>
      <input id="pageSlider" type="range" min="0" max="100" value="0" aria-label="Progress" style="width:min(42vw,340px)">
      <button class="btn icon" id="nextBtn" title="Next page">→</button>
    </span>

    <!-- Type size -->
    <span class="seg" aria-label="Text size">
      <button class="btn" id="smallerBtn">A−</button>
      <button class="btn" id="biggerBtn">A+</button>
    </span>

    <!-- Theme -->
    <span class="seg" aria-label="Theme">
      <button class="btn" id="lightBtn">Light</button>
      <button class="btn" id="sepiaBtn">Sepia</button>
      <button class="btn" id="darkBtn">Dark</button>
    </span>

    <!-- Listen -->
    <button class="btn primary" id="listenBtn">▶ Listen</button>
  </div>

  <main id="stage" aria-live="polite">
    <!-- ePub mode -->
    <section id="epubView">
      <div id="epubMount" role="region" aria-label="Book"></div>
    </section>

    <!-- Fallback text/HTML mode -->
    <section id="textMode" aria-hidden="true">
      <div id="textScroller">
        <article id="textColumns"></article>
      </div>
    </section>

    <!-- Tiny status -->
    <div class="toast" id="toast" role="status"></div>
  </main>

  <!-- ePub.js (client-side only) -->
  <script src="https://unpkg.com/epubjs/dist/epub.js"></script>
  <script>
  (function(){
    const GID = '<%= String(gid || "").replace(/[^0-9]/g,"") %>';
    const TITLE = document.getElementById('bookTitle').textContent.trim() || ('Gutenberg #' + GID);
    const toast = (msg) => {
      const el = document.getElementById('toast');
      el.textContent = msg;
      el.classList.add('show');
      setTimeout(()=>el.classList.remove('show'), 2000);
    };

    // Back: prefer referrer; fallback /read
    (function(){
      const back = document.getElementById('backBtn');
      const ref = document.referrer || '';
      if (ref && (new URL(ref, location.href)).host === location.host) {
        back.addEventListener('click', (e)=>{ e.preventDefault(); history.back(); });
      } else {
        back.setAttribute('href','/read');
      }
    })();

    /* ----------------------------- ePub Mode ------------------------------ */
    const mount = document.getElementById('epubMount');
    const epubView = document.getElementById('epubView');
    const textMode = document.getElementById('textMode');
    const pageSlider = document.getElementById('pageSlider');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const smallerBtn = document.getElementById('smallerBtn');
    const biggerBtn = document.getElementById('biggerBtn');
    const lightBtn = document.getElementById('lightBtn');
    const sepiaBtn = document.getElementById('sepiaBtn');
    const darkBtn = document.getElementById('darkBtn');
    const listenBtn = document.getElementById('listenBtn');

    let book = null, rendition = null, locations = null;
    let fontSize = 100;  // %
    let theme = 'dark';  // dark|sepia|light

    function applyTheme(r){
      const themes = {
        light: { 'body': { 'background': '#ffffff', 'color': '#111111'} },
        sepia: { 'body': { 'background': '#f7f0e1', 'color': '#352f28'} },
        dark:  { 'body': { 'background': '#0f1428', 'color': '#e5e7eb'} },
      };
      r.themes.register(themes);
      r.themes.select(theme);
      r.themes.fontSize(fontSize + '%');
    }

    function syncSlider(loc){
      if (!locations) return;
      try{
        const current = book.rendition.currentLocation();
        const percent = current && current.start && locations.percentageFromCfi
          ? Math.floor(locations.percentageFromCfi(current.start.cfi) * 100)
          : 0;
        pageSlider.value = String(percent);
      }catch(e){}
    }

    async function openEPub(){
      // Try our proxy first, then common Gutenberg fallbacks.
      const candidates = [
        `/proxy/gutenberg-epub/${GID}`,                                 // our Node proxy (recommended)
        `https://www.gutenberg.org/ebooks/${GID}.epub.images?download`, // direct fallbacks
        `https://www.gutenberg.org/ebooks/${GID}.epub.noimages?download`,
        `https://www.gutenberg.org/cache/epub/${GID}/pg${GID}-images.epub`,
        `https://www.gutenberg.org/cache/epub/${GID}/pg${GID}.epub`,
      ];

      for (const href of candidates){
        try{
          book = ePub(href, { openAs: 'epub' });
          rendition = book.renderTo(mount, {
            width: "100%",
            height: "100%",
            spread: "never",
            minSpreadWidth: 9999   // always single page
          });

          applyTheme(rendition);

          rendition.on('relocated', syncSlider);
          rendition.on('rendered', ()=> syncSlider());
          await rendition.display();

          // Build locations (for slider %)
          try{
            await book.ready;
            locations = await book.locations.generate(1000);
          }catch(_){}

          // Wire controls (only once)
          prevBtn.onclick = ()=> rendition.prev();
          nextBtn.onclick = ()=> rendition.next();
          pageSlider.oninput = (e)=>{
            if (!locations) return;
            const pct = Number(e.target.value)/100;
            const cfi = locations.cfiFromPercentage(pct);
            rendition.display(cfi);
          };
          smallerBtn.onclick = ()=>{ fontSize = Math.max(80, fontSize-10); rendition.themes.fontSize(fontSize+'%'); };
          biggerBtn.onclick  = ()=>{ fontSize = Math.min(160, fontSize+10); rendition.themes.fontSize(fontSize+'%'); };
          lightBtn.onclick   = ()=>{ theme='light'; applyTheme(rendition); };
          sepiaBtn.onclick   = ()=>{ theme='sepia'; applyTheme(rendition); };
          darkBtn.onclick    = ()=>{ theme='dark';  applyTheme(rendition); };

          // Listen (browser TTS — simple)
          let speaking = false;
          let utter = null;
          listenBtn.onclick = ()=>{
            if (!window.speechSynthesis) { toast('Speech not supported'); return; }
            if (speaking) {
              window.speechSynthesis.cancel();
              speaking = false; listenBtn.textContent = '▶ Listen';
              return;
            }
            const txt = mount.innerText || '';
            if (!txt.trim()) { toast('Nothing to read on this page'); return; }
            utter = new SpeechSynthesisUtterance(txt);
            utter.rate = 1.0;
            utter.onend = ()=>{ speaking=false; listenBtn.textContent='▶ Listen'; };
            window.speechSynthesis.speak(utter);
            speaking = true; listenBtn.textContent = '⏸ Pause';
          };

          // Success – show ePub view, hide text mode
          epubView.style.display = 'flex';
          textMode.style.display = 'none';
          toast('Loaded ePub');
          return;
        }catch(e){
          console.warn('ePub candidate failed:', href, e);
        }
      }
      throw new Error('All ePub sources failed');
    }

    /* -------------------------- Fallback: Text Mode ------------------------ */
    let colIndex = 0, maxCols = 0;
    const textScroller = document.getElementById('textScroller');
    const textColumns  = document.getElementById('textColumns');

    function textGoto(idx){
      colIndex = Math.max(0, Math.min(maxCols-1, idx));
      const pageWidth = textScroller.clientWidth;
      textScroller.scrollTo({ left: colIndex * (pageWidth + 0), behavior:'instant' });
      pageSlider.value = String(Math.floor((colIndex/(Math.max(1,maxCols-1)))*100));
    }

    function textWireControls(){
      prevBtn.onclick = ()=> textGoto(colIndex-1);
      nextBtn.onclick = ()=> textGoto(colIndex+1);
      pageSlider.oninput = (e)=>{
        const pct = Number(e.target.value)/100;
        textGoto(Math.round(pct * (maxCols-1)));
      };
      smallerBtn.onclick = ()=>{
        const fs = parseFloat(getComputedStyle(textColumns).fontSize);
        textColumns.style.fontSize = Math.max(14, fs-1) + 'px';
        requestAnimationFrame(measureColumns);
      };
      biggerBtn.onclick = ()=>{
        const fs = parseFloat(getComputedStyle(textColumns).fontSize);
        textColumns.style.fontSize = Math.min(22, fs+1) + 'px';
        requestAnimationFrame(measureColumns);
      };
      lightBtn.onclick = ()=>{ document.body.style.background='#ffffff'; textColumns.style.color='#111'; };
      sepiaBtn.onclick = ()=>{ document.body.style.background='#f7f0e1'; textColumns.style.color='#352f28'; };
      darkBtn.onclick  = ()=>{ document.body.style.background='#0f1428'; textColumns.style.color='#e5e7eb'; };

      // TTS in text mode
      let speaking=false, utter=null;
      listenBtn.onclick = ()=>{
        if (!window.speechSynthesis) { toast('Speech not supported'); return; }
        if (speaking){ window.speechSynthesis.cancel(); speaking=false; listenBtn.textContent='▶ Listen'; return; }
        const pageWidth = textScroller.clientWidth;
        const range = document.createRange();
        // Read visible column only
        const x = (pageWidth * colIndex) + 10;
        const y = 10;
        const startNode = document.elementFromPoint( Math.min(textColumns.clientWidth-5, 5), 10 );
        const txt = textColumns.innerText; // coarse; keeps it simple
        if (!txt.trim()){ toast('Nothing to read'); return; }
        utter = new SpeechSynthesisUtterance(txt);
        utter.onend = ()=>{ speaking=false; listenBtn.textContent='▶ Listen'; };
        utter.rate = 1.0;
        window.speechSynthesis.speak(utter);
        speaking=true; listenBtn.textContent='⏸ Pause';
      };
    }

    function measureColumns(){
      // Rough estimate using scrollWidth / viewport width
      const pageW = textScroller.clientWidth;
      maxCols = Math.max(1, Math.ceil(textColumns.scrollWidth / pageW));
      textGoto(colIndex);
    }

    async function openTextFallback(){
      toast('Loading text…');
      const r = await fetch(`/read/gutenberg/${GID}/text`, { credentials:'same-origin' });
      if (!r.ok){ throw new Error('text fetch failed'); }
      const data = await r.json();
      const type = (data && data.type) || 'text';
      let content = (data && data.content) || '';

      // sanitize: drop <script>/<style>/<link>
      content = content.replace(/<\s*(script|style|link)[\s\S]*?<\s*\/\s*\1\s*>/gi, '');

      document.getElementById('bookTitle').textContent = (data && data.title) ? data.title : TITLE;

      if (type === 'html'){
        textColumns.innerHTML = content;
      } else {
        textColumns.textContent = content;
      }

      // show text mode
      epubView.style.display = 'none';
      textMode.style.display = 'block';

      textWireControls();
      requestAnimationFrame(measureColumns);
      toast('Loaded text mode');
    }

    /* ------------------------------ Boot ---------------------------------- */
    (async function boot(){
      try{
        await openEPub();
      }catch(e){
        console.warn('ePub failed; switching to text mode', e);
        await openTextFallback();
      }
      // handle resize for pagination
      window.addEventListener('resize', ()=>{
        if (textMode.style.display === 'block') requestAnimationFrame(measureColumns);
      }, { passive:true });
    })();
  })();
  </script>
</body>
</html>
