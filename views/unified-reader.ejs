<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/header.ejs', {
    pageTitle: pageTitle || 'Reader',
    pageDescription: pageDescription || 'Paginated reader'
  }) %>
  <style>
    :root {
      --bg:#0b0d10; --chrome:#0e1116; --muted:#9aa3ad; --text:#e6edf3;
      --pageBg:#fff; --pageText:#111; --accent:#7aa2ff;
      --barH:54px; --infoH:32px; --gap:48px; --colW:760px;
    }
    *{box-sizing:border-box}
    body{margin:0;background:var(--bg);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

    /* Top chrome */
    .bar{display:flex;align-items:center;gap:12px;padding:12px 16px;border-bottom:1px solid #1e232b;background:var(--chrome);height:var(--barH)}
    .back{color:var(--muted);text-decoration:none}
    .title{font-weight:600}
    .badge{font-size:12px;color:var(--muted);margin-left:6px}
    .tools{margin-left:auto;display:flex;gap:8px}
    .btn{padding:6px 10px;border-radius:10px;border:1px solid #2a3340;background:#12161b;color:#e6edf3;text-decoration:none}

    /* Status row */
    .info{height:var(--infoH);display:flex;align-items:center;gap:12px;padding:0 16px;border-bottom:1px solid #1e232b;background:#0f1319;color:var(--muted);font-size:13px}
    .hidden{display:none}

    /* Reading surface */
    .shell{position:relative; height:calc(100vh - var(--barH) - var(--infoH)); background:#0b0d10}
    .stage{position:absolute; inset:0; overflow:hidden; display:flex; justify-content:center}
    .pageflow{
      height:100%;
      width:100%;
      max-width: calc(var(--colW) + 2*var(--gap));
      padding: 24px var(--gap);
      background: var(--pageBg);
      color: var(--pageText);
      border-radius: 10px;
      box-shadow: 0 12px 34px rgba(0,0,0,.35);
      overflow:hidden;
    }

    /* Multicolumn content — horizontal paging */
    .content{
      height:100%;
      column-width: var(--colW);
      column-gap: var(--gap);
      orphans: 3; widows: 3;
      overflow-x: auto;               /* KEY: enable horizontal scroll */
      overflow-y: hidden;
      scroll-behavior: smooth;        /* smooth page turns */
      -webkit-overflow-scrolling: touch;
    }
    .content::-webkit-scrollbar{height:8px}
    .content::-webkit-scrollbar-thumb{background:#d0d0d0;border-radius:8px}

    .content img, .content svg, .content video { max-width: 100%; height: auto; display:block; margin: 1rem auto; }
    .content pre { white-space: pre-wrap; word-wrap: break-word; font-size: 16px; line-height: 1.5; }
    .content h1, .content h2, .content h3, .content h4 { line-height:1.25; margin: 1.2em 0 .6em; }

    /* Click zones */
    .zone{position:absolute; top:0; bottom:0; width:27%; cursor:pointer}
    .left{left:0}
    .right{right:0}

    /* Bottom controls */
    .centerControls{
      position:absolute; left:50%; transform:translateX(-50%);
      bottom:12px; display:flex; align-items:center; gap:8px;
      background:rgba(0,0,0,.6); color:#fff; padding:6px 10px; border-radius:999px; font-size:12px;
    }
    .centerControls input{
      width:64px; border:1px solid rgba(255,255,255,.25); background:transparent; color:#fff; padding:3px 6px; border-radius:6px;
    }

    @media (max-width: 980px){
      :root{ --colW: 620px; --gap: 40px; }
    }
    @media (max-width: 720px){
      :root{ --colW: 520px; --gap: 32px; }
    }
    @media (max-width: 600px){
      :root{ --colW: 460px; --gap: 28px; }
    }
  </style>
</head>
<body>
  <div class="bar">
    <a class="back" href="javascript:history.back()">← Back</a>
    <span class="title"><%= source === 'gutenberg' ? 'Project Gutenberg' : 'Reader' %></span>
    <% if (typeof gid !== 'undefined') { %><span class="badge">#<%= gid %></span><% } %>
    <div class="tools">
      <a class="btn" id="openOriginal" href="<%= startUrl %>" target="_blank" rel="noopener">Open original ↗</a>
      <a class="btn" href="" onclick="location.reload();return false;">Reload</a>
    </div>
  </div>
  <div class="info">
    <div id="status">Loading book…</div>
    <div id="pageInfo" class="hidden">Page <span id="cur">1</span> / <span id="tot">1</span></div>
  </div>

  <div class="shell">
    <div class="stage">
      <div class="pageflow">
        <div id="content" class="content"></div>
      </div>
      <div class="zone left" id="prevZone" title="Previous page"></div>
      <div class="zone right" id="nextZone" title="Next page"></div>

      <div class="centerControls">
        <span>Go to</span>
        <input id="goto" type="number" min="1" value="1" />
        <span>of <span id="tot2">1</span></span>
        <button class="btn" id="goBtn" style="padding:4px 10px">Go</button>
      </div>
    </div>
  </div>

  <script>
    (function(){
      const gid = <%- JSON.stringify(gid || '') %>;
      const startUrl = <%- JSON.stringify(startUrl || '') %>;

      const status = document.getElementById('status');
      const content = document.getElementById('content');
      const pageInfo = document.getElementById('pageInfo');
      const curEl = document.getElementById('cur');
      const totEl = document.getElementById('tot');
      const totEl2 = document.getElementById('tot2');
      const gotoInput = document.getElementById('goto');
      const goBtn = document.getElementById('goBtn');
      const pageflow = document.querySelector('.pageflow');

      async function loadBook(){
        try {
          const proxied = `/read/gutenberg/${encodeURIComponent(gid)}/proxy?u=${encodeURIComponent(startUrl)}`;
          const html = await fetch(proxied, { credentials: 'omit' }).then(r => r.text());
          const doc = new DOMParser().parseFromString(html, 'text/html');

          // Prefer content inside our proxy shell if present, else the whole body
          let wrap = doc.querySelector('#bl-wrap') || doc.body;

          // If the response is essentially plain text, wrap in <pre>
          if (wrap && wrap.children.length === 0 && (wrap.textContent || '').trim().length > 0) {
            const pre = doc.createElement('pre');
            pre.textContent = wrap.textContent;
            wrap = pre;
          }

          // Remove some obvious boilerplate near top
          Array.from(wrap.querySelectorAll('header, nav')).forEach(el => el.remove());
          Array.from(wrap.querySelectorAll('hr')).slice(0,2).forEach(el => el.remove());

          content.innerHTML = wrap.innerHTML;

          // Recalculate after images finish loading (affects layout/columns)
          const imgs = Array.from(content.querySelectorAll('img'));
          await Promise.all(imgs.map(img => new Promise(res => {
            if (img.complete) return res();
            img.addEventListener('load', res, { once: true });
            img.addEventListener('error', res, { once: true });
          })));

          status.textContent = 'Formatting…';
          await new Promise(r => setTimeout(r, 0)); // allow layout
          setupPaging();
        } catch (e) {
          console.error(e);
          status.textContent = 'Failed to load book. Try "Open original".';
        }
      }

      let totalPages = 1;
      let page = 1;

      function pageWidthPx(){
        const cs = getComputedStyle(pageflow);
        const w = pageflow.clientWidth - parseFloat(cs.paddingLeft) - parseFloat(cs.paddingRight);
        return Math.max(1, w);
      }

      function computeTotal(){
        const pw = pageWidthPx();
        const totalWidth = content.scrollWidth;
        totalPages = Math.max(1, Math.ceil(totalWidth / pw));
        page = Math.min(page, totalPages);
        curEl.textContent = String(page);
        totEl.textContent = String(totalPages);
        totEl2.textContent = String(totalPages);
        gotoInput.max = String(totalPages);
        pageInfo.classList.remove('hidden');
        status.textContent = 'Ready';
      }

      function goTo(p){
        page = Math.max(1, Math.min(totalPages, p|0));
        const x = pageWidthPx() * (page - 1);
        content.scrollTo({ left: x, behavior: 'smooth' });
        curEl.textContent = String(page);
      }

      function next(){ goTo(page + 1); }
      function prev(){ goTo(page - 1); }

      function setupPaging(){
        // horizontal scroll enabled in CSS; ensure starting position
        content.scrollLeft = 0;

        // Resize observers: recompute on container or content changes
        const ro1 = new ResizeObserver(() => { computeTotal(); goTo(page); });
        ro1.observe(pageflow);
        const ro2 = new ResizeObserver(() => { computeTotal(); goTo(page); });
        ro2.observe(content);

        // Click zones + keyboard
        document.getElementById('nextZone').addEventListener('click', next);
        document.getElementById('prevZone').addEventListener('click', prev);
        window.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowRight' || e.key === 'PageDown') { e.preventDefault(); next(); }
          if (e.key === 'ArrowLeft'  || e.key === 'PageUp')   { e.preventDefault(); prev(); }
        });

        // Go-to
        goBtn.addEventListener('click', () => goTo(parseInt(gotoInput.value || '1', 10)));
        gotoInput.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') { goTo(parseInt(gotoInput.value || '1', 10)); }
        });

        computeTotal();
        goTo(1);
      }

      loadBook();
    })();
  </script>
</body>
</html>
