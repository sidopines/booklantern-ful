<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head.ejs', {
    pageTitle: (book && book.title) ? (book.title + ' — Reader') : 'Reader',
    pageDescription: (book && book.creator) ? ('Read ' + book.title + ' by ' + book.creator) : 'Read this book in BookLantern’s clean reader'
  }) %>

  <style>
    :root{
      --bg:#ffffff; --ink:#0f172a; --muted:#667085; --line:#e5e7eb;
      --paper:#fff; --accent:#5b74ff; --sepia:#f7f1e1; --darkbg:#0b0f17; --darkink:#e5edf5;
    }
    *{ box-sizing: border-box; }
    html,body{ height:100%; margin:0; background:var(--bg); color:var(--ink); font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; }
    .reader-wrap{ display:flex; flex-direction:column; height:100%; }

    /* Toolbar */
    .toolbar{
      position: sticky; top:0; z-index:5;
      display:flex; gap:8px; align-items:center; padding:8px 12px;
      border-bottom:1px solid var(--line); background:#fff;
    }
    .toolbar .left{ display:flex; gap:8px; align-items:center; }
    .toolbar .grow{ flex:1 1 auto; }
    .toolbtn{
      appearance:none; border:1px solid var(--line); background:#fff; padding:7px 10px; border-radius:10px; cursor:pointer; font-weight:600;
    }
    .toolbtn.primary{ background:var(--accent); color:#fff; border-color:transparent; }
    .toolbtn[disabled]{ opacity:.5; cursor:not-allowed; }
    .slider{ width:220px; }

    /* Stage */
    .stage{
      display:grid; grid-template-columns: minmax(12px, 1fr) minmax(280px, 860px) minmax(12px, 1fr);
      grid-template-rows: 1fr;
      gap: 0;
      height: calc(100% - 54px);
    }
    .edge{ display:flex; align-items:center; justify-content:center; }
    .edge button{ opacity:.65; }
    .book{
      display:flex; align-items:stretch; justify-content:center;
      background:var(--paper);
      border-left:1px solid var(--line);
      border-right:1px solid var(--line);
    }
    #viewer{
      width:100%; height:100%;
    }

    /* Dark / Sepia */
    .sepia body, .sepia .toolbar{ background:var(--sepia); }
    .sepia .book{ background:#fbf6e8; }
    .dark body{ background:var(--darkbg); color:var(--darkink); }
    .dark .toolbar{ background:#0f1522; border-color:#1e293b; }
    .dark .toolbtn{ background:#0f1522; color:#dbe6f5; border-color:#1e293b; }
    .dark .book{ background:#0c121d; border-color:#1e293b; }

    /* Mobile */
    @media (max-width: 780px){
      .stage{ grid-template-columns: 12px 1fr 12px; }
      .slider{ width:140px; }
      .toolbar{ flex-wrap:wrap; gap:6px; }
      .grow{ width:100%; order:3; }
    }
  </style>
</head>
<body>
  <%- include('./partials/navbar.ejs') %>

  <div class="reader-wrap" id="app">
    <div class="toolbar" role="toolbar" aria-label="Reader controls">
      <div class="left">
        <a href="javascript:history.back()" class="toolbtn" aria-label="Back">← Back</a>
        <strong><%= (book && book.title) ? book.title : 'Book' %></strong>
      </div>
      <div class="grow"></div>

      <button id="prev" class="toolbtn" title="Previous page">←</button>
      <input id="progress" class="slider" type="range" min="0" max="100" value="0" aria-label="Progress">
      <button id="next" class="toolbtn" title="Next page">→</button>

      <button id="fs-decrease" class="toolbtn" title="Smaller text">A−</button>
      <button id="fs-increase" class="toolbtn" title="Larger text">A+</button>

      <select id="theme" class="toolbtn" aria-label="Theme">
        <option value="light">Light</option>
        <option value="sepia">Sepia</option>
        <option value="dark">Dark</option>
      </select>

      <button id="listen" class="toolbtn primary" title="Listen / Pause">► Listen</button>
    </div>

    <div class="stage">
      <div class="edge"><button id="edge-prev" class="toolbtn" aria-label="Previous page">←</button></div>
      <div class="book"><div id="viewer"></div></div>
      <div class="edge"><button id="edge-next" class="toolbtn" aria-label="Next page">→</button></div>
    </div>
  </div>

  <!-- ePub.js -->
  <script src="https://cdn.jsdelivr.net/npm/epubjs@0.3/dist/epub.min.js"></script>

  <script>
    // Inputs from server
    const GID     = "<%= gid %>";
    // We proxy the ePub to avoid CORS
    const EPUBURL = "/proxy/gutenberg-epub/" + encodeURIComponent(GID);

    // ePub.js
    const book    = ePub(EPUBURL);
    const viewer  = document.getElementById('viewer');
    const rendition = book.renderTo(viewer, {
      width: "100%",
      height: "100%",
      flow: "paginated",
      spread: "auto"
    });

    let fontSize = 100; // %
    function applyFont(){ rendition.themes.override("font-size", fontSize + "%"); }
    rendition.display();

    // Progress
    const progress = document.getElementById('progress');
    function updateProgress(){
      book.locations.generate(1000).then(() => {
        const cfi = rendition.currentLocation().start.cfi;
        const pct = book.locations.percentageFromCfi(cfi) * 100;
        progress.value = Math.max(0, Math.min(100, Math.round(pct)));
      }).catch(()=>{});
    }
    rendition.on("rendered", updateProgress);
    progress.addEventListener('input', async (e)=>{
      try{
        const goto = parseFloat(e.target.value) / 100;
        const cfi  = book.locations.cfiFromPercentage(goto);
        await rendition.display(cfi);
      }catch(_){}
    });

    // Pager
    document.getElementById('prev').onclick = ()=>rendition.prev();
    document.getElementById('next').onclick = ()=>rendition.next();
    document.getElementById('edge-prev').onclick = ()=>rendition.prev();
    document.getElementById('edge-next').onclick = ()=>rendition.next();

    // Font size
    document.getElementById('fs-increase').onclick = ()=>{ fontSize = Math.min(160, fontSize+8); applyFont(); };
    document.getElementById('fs-decrease').onclick = ()=>{ fontSize = Math.max(80,  fontSize-8); applyFont(); };

    // Theme
    const themeSel = document.getElementById('theme');
    themeSel.onchange = ()=>{
      document.documentElement.classList.remove('sepia','dark');
      if (themeSel.value==='sepia') document.documentElement.classList.add('sepia');
      if (themeSel.value==='dark')  document.documentElement.classList.add('dark');
    };

    // ============ Listen (Web Speech) ============
    // Phase A: speak current visible text; pause/resume; continue across page turns.
    const listenBtn = document.getElementById('listen');
    let utter = null, speaking = false;

    function getVisibleText(){
      try{
        const ifr = viewer.querySelector('iframe');
        if (!ifr) return '';
        const sel = ifr.contentDocument.body;
        if (!sel) return '';
        // Grab readable text only
        return sel.innerText.replace(/\s+/g,' ').trim();
      }catch(_){ return ''; }
    }

    function startSpeak(){
      const text = getVisibleText();
      if (!text) return;
      utter = new SpeechSynthesisUtterance(text);
      utter.rate = 1.0;
      utter.onend = () => { speaking=false; rendition.next(); }; // auto-advance
      speaking = true;
      speechSynthesis.speak(utter);
      listenBtn.textContent = '❚❚ Pause';
    }
    function pauseSpeak(){
      speechSynthesis.pause(); speaking=false; listenBtn.textContent = '► Listen';
    }
    function resumeSpeak(){
      speechSynthesis.resume(); speaking=true; listenBtn.textContent = '❚❚ Pause';
    }
    function stopSpeak(){
      speechSynthesis.cancel(); speaking=false; listenBtn.textContent = '► Listen';
    }

    listenBtn.onclick = ()=>{
      if (!('speechSynthesis' in window)) { alert('Text-to-speech not supported in this browser.'); return; }
      if (speechSynthesis.speaking && !speechSynthesis.paused) { pauseSpeak(); return; }
      if (speechSynthesis.paused) { resumeSpeak(); return; }
      stopSpeak(); startSpeak();
    };
    rendition.on('relocated', ()=>{ if (speechSynthesis.speaking) { stopSpeak(); startSpeak(); } });

    // Stop speech when user leaves
    window.addEventListener('beforeunload', stopSpeak, { once:true });

    // Initial styles
    applyFont();
  </script>
</body>
</html>
