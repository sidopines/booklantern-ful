<!-- views/unified-reader.ejs -->
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title><%= pageTitle || 'Read • BookLantern' %></title>
  <link rel="stylesheet" href="/css/site.css"/>
  <style>
    body{background:#fff;}
    .topbar{position:sticky;top:0;z-index:20;background:#fff;display:flex;gap:.5rem;align-items:center;padding:.5rem;border-bottom:1px solid #eee}
    .page{max-width:1200px;margin:0 auto;padding:.5rem}
    .pane{min-height:70vh;display:flex;justify-content:center;align-items:flex-start}
    #viewer{width:100%;max-width:780px;min-height:70vh;border-radius:12px;border:1px solid #eee;box-shadow:0 4px 20px rgba(0,0,0,.04);padding:16px;overflow:auto}
    .muted{color:#777}
    .btn{padding:.4rem .6rem;border-radius:10px;border:1px solid #e5e7eb;background:#fff}
    .btn.primary{background:#4f46e5;color:#fff;border-color:#4f46e5}
    .small{font-size:.9rem}
    .grow{flex:1}
    .slider{vertical-align:middle}
  </style>
  <% if (mode === 'epub') { %>
  <script src="https://unpkg.com/epubjs@0.3/dist/epub.min.js"></script>
  <% } %>
</head>
<body>
  <header class="topbar page">
    <a class="btn" href="javascript:history.back()">&larr; Back</a>
    <div class="muted small"><%= title || 'Book' %><% if (typeof author === 'string' && author) { %> — <%= author %><% } %></div>
    <div class="grow"></div>

    <!-- TTS controls -->
    <button id="ttsPlay" class="btn primary">Listen</button>
    <button id="ttsStop" class="btn">Stop</button>
    <button id="ttsSel" class="btn">Read Selection</button>
    <label class="small muted" style="margin-left:.5rem;">Rate <input id="rate" type="range" min="0.5" max="2" step="0.1" value="1" class="slider"></label>
    <label class="small muted" style="margin-left:.5rem;">Vol <input id="vol" type="range" min="0" max="1" step="0.05" value="0.9" class="slider"></label>
  </header>

  <main class="page">
    <div id="status" class="muted small">loading…</div>
    <section class="pane">
      <div id="viewer"><div class="muted">Loading…</div></div>
    </section>
  </main>

  <script>
    const MODE = <%- JSON.stringify(mode||'') %>;
    const EPUB_URL = <%- JSON.stringify(typeof epubUrl==='string'?epubUrl:'') %>;
    const HTML_URL = <%- JSON.stringify(typeof htmlUrl==='string'?htmlUrl:'') %>;
    const GID = <%- JSON.stringify(typeof gid==='string'?gid:'') %>;

    const statusEl = document.getElementById('status');
    const viewer = document.getElementById('viewer');
    function setStatus(s){ statusEl.textContent = s; }

    async function loadHTML(url) {
      try {
        setStatus('loading…');
        const r = await fetch(url, { credentials:'same-origin' });
        if (!r.ok) throw new Error('fetch failed');
        const html = await r.text();
        viewer.innerHTML = html; // fragment from server
        setStatus('ready');
      } catch (e) {
        viewer.innerHTML = '<div class="muted">Could not load content.</div>';
        setStatus('error');
      }
    }

    async function loadEPUB() {
      try {
        setStatus('loading…');
        const book = ePub(EPUB_URL, { openAs:'epub' });
        const rendition = book.renderTo('viewer', { width:'100%', height:'80vh', flow:'paginated' });
        await rendition.display();
        setStatus('ready');
      } catch (e) {
        // Fallback to HTML for the same Gutenberg book (never leave user blank)
        if (GID) {
          return loadHTML(`/read/gutenberg/${encodeURIComponent(GID)}/html`);
        }
        viewer.innerHTML = '<div class="muted">Could not open EPUB. Please try another copy.</div>';
        setStatus('error');
      }
    }

    if (MODE === 'html' && HTML_URL) loadHTML(HTML_URL);
    else if (MODE === 'epub' && EPUB_URL) loadEPUB();
    else { viewer.innerHTML = '<div class="muted">No content.</div>'; setStatus('error'); }

    /* ---------- TTS ---------- */
    const playBtn = document.getElementById('ttsPlay');
    const stopBtn = document.getElementById('ttsStop');
    const selBtn  = document.getElementById('ttsSel');
    const rateEl  = document.getElementById('rate');
    const volEl   = document.getElementById('vol');

    function speak(text){
      if (!('speechSynthesis' in window)) return;
      window.speechSynthesis.cancel();
      const u = new SpeechSynthesisUtterance(text);
      u.rate = parseFloat(rateEl.value || '1');
      u.volume = parseFloat(volEl.value || '0.9');
      window.speechSynthesis.speak(u);
    }
    function textFromViewer(){
      const sel = window.getSelection ? String(window.getSelection()) : '';
      if (sel && sel.trim()) return sel.trim();
      return viewer.innerText.replace(/\s+/g,' ').trim().slice(0, 8000);
    }
    playBtn.addEventListener('click', ()=> speak(textFromViewer()));
    stopBtn.addEventListener('click', ()=> window.speechSynthesis.cancel());
    selBtn.addEventListener('click', ()=>{
      const sel = window.getSelection ? String(window.getSelection()) : '';
      if (sel && sel.trim()) speak(sel.trim());
    });
  </script>
</body>
</html>
